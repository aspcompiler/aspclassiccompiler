<?xml version="1.0"?>
<doc>
<assembly>
<name>
Dlrsoft.VBParser
</name>
</assembly>
<members>
<member name="T:Dlrsoft.VBScript.Parser.TreeCollection`1">
	<summary>
 A collection of a particular type of trees
 </summary>
	<typeparam name="T">The type of tree the collection contains.</typeparam>
</member><member name="P:Dlrsoft.VBScript.Parser.EnumValueDeclaration.Name">
	<summary>
 The name of the enumerated value.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.EnumValueDeclaration.EqualsLocation">
	<summary>
 The location of the '=', if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.EnumValueDeclaration.Expression">
	<summary>
 The enumerated value, if any.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.EnumValueDeclaration.#ctor(Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.Name,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for an enumerated value.
 </summary>
	<param name="attributes">The attributes on the declaration.</param>
	<param name="name">The name of the declaration.</param>
	<param name="equalsLocation">The location of the '=', if any.</param>
	<param name="expression">The enumerated value, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.EnumValueDeclaration">
	<summary>
 A parse tree for an enumerated value declaration.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ExpressionCollection.#ctor(System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Expression},System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Location},Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new collection of expressions.
 </summary>
	<param name="expressions">The expressions in the collection.</param>
	<param name="commaLocations">The locations of the commas in the collection.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ExpressionCollection">
	<summary>
 A read-only collection of expressions.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.SpecialName.#ctor(Dlrsoft.VBScript.Parser.TreeType,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new special name parse tree.
 </summary>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.SpecialName">
	<summary>
 A parse tree for a special name (i.e. 'Global').
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.GotoStatement.#ctor(Dlrsoft.VBScript.Parser.SimpleName,System.Boolean,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a parse tree for a GoTo statement.
 </summary>
	<param name="name">The label to branch to, if any.</param>
	<param name="isLineNumber">Whether the label is a line number.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.GotoStatement">
	<summary>
 A parse tree for a GoTo statement.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.RemoveHandlerStatement.#ctor(Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a RemoveHandler statement.
 </summary>
	<param name="name">The name of the event.</param>
	<param name="commaLocation">The location of the ','.</param>
	<param name="delegateExpression">The delegate expression.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.RemoveHandlerStatement">
	<summary>
 A parse tree for a RemoveHandler statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ResumeStatement.ResumeType">
	<summary>
 The type of the Resume statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ResumeStatement.NextLocation">
	<summary>
 The location of the 'Next', if any.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ResumeStatement.#ctor(Dlrsoft.VBScript.Parser.ResumeType,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.SimpleName,System.Boolean,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a parse tree for a Resume statement.
 </summary>
	<param name="resumeType">The type of the Resume statement.</param>
	<param name="nextLocation">The location of the 'Next', if any.</param>
	<param name="name">The label name, if any.</param>
	<param name="isLineNumber">Whether the label is a line number.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ResumeStatement">
	<summary>
 A parse tree for a Resume statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Scanner.TabSpaces">
	<summary>
 How many columns a tab character should be considered.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Scanner.Version">
	<summary>
 The version of Visual Basic this scanner operates on.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.Scanner.#ctor(System.String)">
	<summary>
 Constructs a scanner for a string.
 </summary>
	<param name="source">The string to scan.</param>
</member><member name="M:Dlrsoft.VBScript.Parser.Scanner.#ctor(System.String,Dlrsoft.VBScript.Parser.LanguageVersion)">
	<summary>
 Constructs a scanner for a string.
 </summary>
	<param name="source">The string to scan.</param>
	<param name="version">The language version to parse.</param>
</member><member name="M:Dlrsoft.VBScript.Parser.Scanner.#ctor(System.IO.Stream)">
	<summary>
 Constructs a scanner for a stream.
 </summary>
	<param name="source">The stream to scan.</param>
</member><member name="M:Dlrsoft.VBScript.Parser.Scanner.#ctor(System.IO.Stream,Dlrsoft.VBScript.Parser.LanguageVersion)">
	<summary>
 Constructs a scanner for a stream.
 </summary>
	<param name="source">The stream to scan.</param>
	<param name="version">The language version to parse.</param>
</member><member name="M:Dlrsoft.VBScript.Parser.Scanner.#ctor(System.IO.TextReader)">
	<summary>
 Constructs a canner for a general TextReader.
 </summary>
	<param name="source">The TextReader to scan.</param>
</member><member name="M:Dlrsoft.VBScript.Parser.Scanner.#ctor(System.IO.TextReader,Dlrsoft.VBScript.Parser.LanguageVersion)">
	<summary>
 Constructs a canner for a general TextReader.
 </summary>
	<param name="source">The TextReader to scan.</param>
	<param name="version">The language version to parse.</param>
</member><member name="M:Dlrsoft.VBScript.Parser.Scanner.Close">
	<summary>
 Closes/disposes the scanner.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.Scanner.Seek(Dlrsoft.VBScript.Parser.Token)">
	<summary>
 Seeks backwards in the stream position to a particular token.
 </summary>
	<param name="token">The token to seek back to.</param>
	<exception cref="T:System.ObjectDisposedException">Thrown when the scanner has been closed.</exception>
	<exception cref="T:System.ArgumentException">Thrown when token was not produced by this scanner.</exception>
</member><member name="P:Dlrsoft.VBScript.Parser.Scanner.IsOnFirstToken">
	<summary>
 Whether the stream is positioned on the first token.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.Scanner.Previous">
	<summary>
 Fetches the previous token in the stream.
 </summary>
	<returns>The previous token.</returns>
	<exception cref="T:System.ObjectDisposedException">Thrown when the scanner has been closed.</exception>
	<exception cref="T:System.InvalidOperationException">Thrown when the scanner is positioned on the first token.</exception>
</member><member name="M:Dlrsoft.VBScript.Parser.Scanner.Peek">
	<summary>
 Fetches the current token without advancing the stream position.
 </summary>
	<returns>The current token.</returns>
	<exception cref="T:System.ObjectDisposedException">Thrown when the scanner has been closed.</exception>
</member><member name="M:Dlrsoft.VBScript.Parser.Scanner.Read">
	<summary>
 Fetches the current token and advances the stream position.
 </summary>
	<returns>The current token.</returns>
	<exception cref="T:System.ObjectDisposedException">Thrown when the scanner has been closed.</exception>
</member><member name="M:Dlrsoft.VBScript.Parser.Scanner.ReadBlock(Dlrsoft.VBScript.Parser.Token[],System.Int32,System.Int32)">
	<summary>
 Fetches more than one token at a time from the stream.
 </summary>
	<param name="buffer">The array to put the tokens into.</param>
	<param name="index">The location in the array to start putting the tokens into.</param>
	<param name="count">The number of tokens to read.</param>
	<returns>The number of tokens read.</returns>
	<exception cref="T:System.ObjectDisposedException">Thrown when the scanner has been closed.</exception>
	<exception cref="T:System.NullReferenceException">Thrown when the buffer is Nothing.</exception>
	<exception cref="T:System.ArgumentException">Thrown when the index or count is invalid, or when there isn't enough room in the buffer.</exception>
</member><member name="M:Dlrsoft.VBScript.Parser.Scanner.ReadLine">
	<summary>
 Reads all of the tokens between the current position and the end of the line (or the end of the stream).
 </summary>
	<returns>The tokens read.</returns>
	<exception cref="T:System.ObjectDisposedException">Thrown when the scanner has been closed.</exception>
</member><member name="M:Dlrsoft.VBScript.Parser.Scanner.ReadToEnd">
	<summary>
 Reads all the tokens between the current position and the end of the stream.
 </summary>
	<returns>The tokens read.</returns>
	<exception cref="T:System.ObjectDisposedException">Thrown when the scanner has been closed.</exception>
</member><member name="T:Dlrsoft.VBScript.Parser.Scanner">
	<summary>
 A lexical analyzer for Visual Basic .NET. It produces a stream of lexical tokens.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.StringLiteralToken.Literal">
	<summary>
 The value of the literal.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.StringLiteralToken.#ctor(System.String,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new string literal token.
 </summary>
	<param name="literal">The value of the literal.</param>
	<param name="span">The location of the literal.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.StringLiteralToken">
	<summary>
 A string literal.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.IntrinsicType">
	<summary>
 The type of an intrinsic type name.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Location.Index">
	<summary>
 The index in the stream (0-based).
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Location.Line">
	<summary>
 The physical line number (1-based).
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Location.Column">
	<summary>
 The physical column number (1-based).
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Location.IsValid">
	<summary>
 Whether the location is a valid location.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.Location.#ctor(System.Int64,System.Int64,System.Int64)">
	<summary>
 Constructs a new Location for a particular source location.
 </summary>
	<param name="index">The index in the stream (0-based).</param>
	<param name="line">The physical line number (1-based).</param>
	<param name="column">The physical column number (1-based).</param>
</member><member name="M:Dlrsoft.VBScript.Parser.Location.op_Equality(Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Location)">
	<summary>
 Compares two specified Location values to see if they are equal.
 </summary>
	<param name="left">One location to compare.</param>
	<param name="right">The other location to compare.</param>
	<returns>True if the locations are the same, False otherwise.</returns>
</member><member name="M:Dlrsoft.VBScript.Parser.Location.op_Inequality(Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Location)">
	<summary>
 Compares two specified Location values to see if they are not equal.
 </summary>
	<param name="left">One location to compare.</param>
	<param name="right">The other location to compare.</param>
	<returns>True if the locations are not the same, False otherwise.</returns>
</member><member name="M:Dlrsoft.VBScript.Parser.Location.op_LessThan(Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Location)">
	<summary>
 Compares two specified Location values to see if one is before the other.
 </summary>
	<param name="left">One location to compare.</param>
	<param name="right">The other location to compare.</param>
	<returns>True if the first location is before the other location, False otherwise.</returns>
</member><member name="M:Dlrsoft.VBScript.Parser.Location.op_GreaterThan(Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Location)">
	<summary>
 Compares two specified Location values to see if one is after the other.
 </summary>
	<param name="left">One location to compare.</param>
	<param name="right">The other location to compare.</param>
	<returns>True if the first location is after the other location, False otherwise.</returns>
</member><member name="M:Dlrsoft.VBScript.Parser.Location.op_LessThanOrEqual(Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Location)">
	<summary>
 Compares two specified Location values to see if one is before or the same as the other.
 </summary>
	<param name="left">One location to compare.</param>
	<param name="right">The other location to compare.</param>
	<returns>True if the first location is before or the same as the other location, False otherwise.</returns>
</member><member name="M:Dlrsoft.VBScript.Parser.Location.op_GreaterThanOrEqual(Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Location)">
	<summary>
 Compares two specified Location values to see if one is after or the same as the other.
 </summary>
	<param name="left">One location to compare.</param>
	<param name="right">The other location to compare.</param>
	<returns>True if the first location is after or the same as the other location, False otherwise.</returns>
</member><member name="M:Dlrsoft.VBScript.Parser.Location.Compare(Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Location)">
	<summary>
 Compares two specified Location values.
 </summary>
	<param name="left">One location to compare.</param>
	<param name="right">The other location to compare.</param>
	<returns>0 if the locations are equal, -1 if the left one is less than the right one, 1 otherwise.</returns>
</member><member name="T:Dlrsoft.VBScript.Parser.Location">
	<summary>
 Stores source code line and column information.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.AddHandlerAccessorDeclaration.AddHandlerLocation">
	<summary>
 The location of the 'AddHandler'.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.AddHandlerAccessorDeclaration.Parameters">
	<summary>
 The accessor's parameters.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.AddHandlerAccessorDeclaration.Statements">
	<summary>
 The statements in the accessor.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.AddHandlerAccessorDeclaration.EndStatement">
	<summary>
 The End declaration for the accessor.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.AddHandlerAccessorDeclaration.#ctor(Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.ParameterCollection,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.EndBlockDeclaration,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a property accessor.
 </summary>
	<param name="attributes">The attributes for the parse tree.</param>
	<param name="addHandlerLocation">The location of the 'AddHandler'.</param>
	<param name="parameters">The parameters of the declaration.</param>
	<param name="statements">The statements in the declaration.</param>
	<param name="endStatement">The end block declaration, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.AddHandlerAccessorDeclaration">
	<summary>
 A parse tree for a AddHandler property accessor.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ModifiedDeclaration.Attributes">
	<summary>
 The attributes on the declaration.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ModifiedDeclaration.Modifiers">
	<summary>
 The modifiers on the declaration.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.ModifiedDeclaration">
	<summary>
 A parse tree for a declaration with modifiers.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.AddressOfExpression.#ctor(Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new AddressOf expression parse tree.
 </summary>
	<param name="operand">The operand of AddressOf.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.AddressOfExpression">
	<summary>
 A parse tree for an AddressOf expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.DecimalLiteralExpression.Literal">
	<summary>
 The literal value.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.DecimalLiteralExpression.TypeCharacter">
	<summary>
 The type character on the literal value.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.DecimalLiteralExpression.#ctor(System.Decimal,Dlrsoft.VBScript.Parser.TypeCharacter,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for a floating point literal.
 </summary>
	<param name="literal">The literal value.</param>
	<param name="typeCharacter">The type character on the literal value.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.DecimalLiteralExpression">
	<summary>
 A parse tree for a decimal literal expression.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.Expression.GetBadExpression(Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Creates a bad expression.
 </summary>
	<param name="span">The location of the parse tree.</param>
	<returns>A bad expression.</returns>
</member><member name="P:Dlrsoft.VBScript.Parser.Expression.IsConstant">
	<summary>
 Whether the expression is constant or not.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.Expression">
	<summary>
 A parse tree for an expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ForEachBlockStatement.EachLocation">
	<summary>
 The location of the 'Each'.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ForEachBlockStatement.ControlExpression">
	<summary>
 The control expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ForEachBlockStatement.ControlVariableDeclarator">
	<summary>
 The control variable declarator, if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ForEachBlockStatement.InLocation">
	<summary>
 The location of the 'In'.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ForEachBlockStatement.CollectionExpression">
	<summary>
 The collection expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ForEachBlockStatement.NextStatement">
	<summary>
 The Next statement, if any.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ForEachBlockStatement.#ctor(Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.VariableDeclarator,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.NextStatement,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a For Each statement.
 </summary>
	<param name="eachLocation">The location of the 'Each'.</param>
	<param name="controlExpression">The control expression.</param>
	<param name="controlVariableDeclarator">The control variable declarator, if any.</param>
	<param name="inLocation">The location of the 'In'.</param>
	<param name="collectionExpression">The collection expression.</param>
	<param name="statements">The statements in the block.</param>
	<param name="nextStatement">The Next statement, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ForEachBlockStatement">
	<summary>
 A parse tree for a For Each statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.NamedTypeName.Name">
	<summary>
 The name of the type.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.NamedTypeName.GetBadNamedType(Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Creates a new bad named type.
 </summary>
	<param name="span">The location of the bad named type.</param>
	<returns>A bad named type.</returns>
</member><member name="M:Dlrsoft.VBScript.Parser.NamedTypeName.#ctor(Dlrsoft.VBScript.Parser.Name,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new named type parse tree.
 </summary>
	<param name="name">The name of the type.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.NamedTypeName">
	<summary>
 A parse tree for a named type.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.BlockType">
	<summary>
 The type a block declaration.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.FunctionDeclaration.#ctor(Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.ModifierCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.SimpleName,Dlrsoft.VBScript.Parser.TypeParameterCollection,Dlrsoft.VBScript.Parser.ParameterCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.TypeName,Dlrsoft.VBScript.Parser.NameCollection,Dlrsoft.VBScript.Parser.NameCollection,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.EndBlockDeclaration,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Creates a new parse tree for a Function declaration.
 </summary>
	<param name="attributes">The attributes for the parse tree.</param>
	<param name="modifiers">The modifiers for the parse tree.</param>
	<param name="keywordLocation">The location of the keyword.</param>
	<param name="name">The name of the declaration.</param>
	<param name="typeParameters">The type parameters on the declaration, if any.</param>
	<param name="parameters">The parameters of the declaration.</param>
	<param name="asLocation">The location of the 'As', if any.</param>
	<param name="resultTypeAttributes">The attributes on the result type, if any.</param>
	<param name="resultType">The result type, if any.</param>
	<param name="implementsList">The list of implemented members.</param>
	<param name="handlesList">The list of handled events.</param>
	<param name="statements">The statements in the declaration.</param>
	<param name="endDeclaration">The end block declaration, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.FunctionDeclaration">
	<summary>
 A parse tree for a Function declaration.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ImportsDeclaration.ImportMembers">
	<summary>
 The members imported.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ImportsDeclaration.#ctor(Dlrsoft.VBScript.Parser.ImportCollection,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a parse tree for an Imports declaration.
 </summary>
	<param name="importMembers">The members imported.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ImportsDeclaration">
	<summary>
 A parse tree for an Imports declaration.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ModuleDeclaration.#ctor(Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.ModifierCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.SimpleName,Dlrsoft.VBScript.Parser.DeclarationCollection,Dlrsoft.VBScript.Parser.EndBlockDeclaration,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a Module declaration.
 </summary>
	<param name="attributes">The attributes for the parse tree.</param>
	<param name="modifiers">The modifiers for the parse tree.</param>
	<param name="keywordLocation">The location of the keyword.</param>
	<param name="name">The name of the declaration.</param>
	<param name="declarations">The declarations in the block.</param>
	<param name="endStatement">The end block declaration, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ModuleDeclaration">
	<summary>
 A parse tree for a Module declaration.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.PropertyDeclaration.ImplementsList">
	<summary>
 The list of implemented members.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.PropertyDeclaration.Accessors">
	<summary>
 The property accessors.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.PropertyDeclaration.EndDeclaration">
	<summary>
 The End Property declaration, if any.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.PropertyDeclaration.#ctor(Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.ModifierCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.SimpleName,Dlrsoft.VBScript.Parser.ParameterCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.TypeName,Dlrsoft.VBScript.Parser.NameCollection,Dlrsoft.VBScript.Parser.DeclarationCollection,Dlrsoft.VBScript.Parser.EndBlockDeclaration,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a property declaration.
 </summary>
	<param name="attributes">The attributes on the declaration.</param>
	<param name="modifiers">The modifiers on the declaration.</param>
	<param name="keywordLocation">The location of the keyword.</param>
	<param name="name">The name of the property.</param>
	<param name="parameters">The parameters of the property.</param>
	<param name="asLocation">The location of the 'As', if any.</param>
	<param name="resultTypeAttributes">The attributes on the result type.</param>
	<param name="resultType">The result type, if any.</param>
	<param name="implementsList">The implements list.</param>
	<param name="accessors">The property accessors.</param>
	<param name="endDeclaration">The End Property declaration, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.PropertyDeclaration">
	<summary>
 A parse tree for a property declaration.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.NewAggregateExpression.Target">
	<summary>
 The target array type to create.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.NewAggregateExpression.Initializer">
	<summary>
 The initializer for the array.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.NewAggregateExpression.#ctor(Dlrsoft.VBScript.Parser.ArrayTypeName,Dlrsoft.VBScript.Parser.AggregateInitializer,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 The constructor for a New array expression parse tree.
 </summary>
	<param name="target">The target array type to create.</param>
	<param name="initializer">The initializer for the array.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.NewAggregateExpression">
	<summary>
 A parse tree for a New array expression.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ImportCollection.#ctor(System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Import},System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Location},Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a collection of imports.
 </summary>
	<param name="importMembers">The imports in the collection.</param>
	<param name="commaLocations">The location of the commas.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ImportCollection">
	<summary>
 A read-only collection of imports.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Modifier.ModifierType">
	<summary>
 The type of the modifier.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.Modifier.#ctor(Dlrsoft.VBScript.Parser.ModifierTypes,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new modifier parse tree.
 </summary>
	<param name="modifierType">The type of the modifier.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.Modifier">
	<summary>
 A parse tree for a declaration modifier.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.ModifierTypes">
	<summary>
 The type of a parse tree modifier.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.DoBlockStatement.IsWhile">
	<summary>
 Whether the Do is followed by a While or Until, if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.DoBlockStatement.WhileOrUntilLocation">
	<summary>
 The location of the While or Until, if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.DoBlockStatement.Expression">
	<summary>
 The While or Until expression, if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.DoBlockStatement.EndStatement">
	<summary>
 The ending Loop statement.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.DoBlockStatement.#ctor(Dlrsoft.VBScript.Parser.Expression,System.Boolean,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.LoopStatement,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a Do statement.
 </summary>
	<param name="expression">The While or Until expression, if any.</param>
	<param name="isWhile">Whether the Do is followed by a While or Until, if any.</param>
	<param name="whileOrUntilLocation">The location of the While or Until, if any.</param>
	<param name="statements">The statements in the block.</param>
	<param name="endStatement">The ending Loop statement.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments on the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.DoBlockStatement">
	<summary>
 A parse tree for a Do statement.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ErrorStatement.#ctor(Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for an Error statement.
 </summary>
	<param name="expression">The expression.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ErrorStatement">
	<summary>
 A parse tree for an Error statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ExpressionStatement.Expression">
	<summary>
 The expression.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ExpressionStatement.#ctor(Dlrsoft.VBScript.Parser.TreeType,Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for an expression statement.
 </summary>
	<param name="type">The type of the parse tree.</param>
	<param name="expression">The expression.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ExpressionStatement">
	<summary>
 A parse tree for an expression statement.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.FinallyStatement.#ctor(Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a Finally statement.
 </summary>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.FinallyStatement">
	<summary>
 A parse tree for a Finally statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.DecimalLiteralToken.Literal">
	<summary>
 The literal value.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.DecimalLiteralToken.TypeCharacter">
	<summary>
 The type character of the literal.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.DecimalLiteralToken.#ctor(System.Decimal,Dlrsoft.VBScript.Parser.TypeCharacter,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new decimal literal token.
 </summary>
	<param name="literal">The literal value.</param>
	<param name="typeCharacter">The literal's type character.</param>
	<param name="span">The location of the literal.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.DecimalLiteralToken">
	<summary>
 A decimal literal token.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.EndOfStreamToken.#ctor(Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Creates a new end-of-stream token.
 </summary>
	<param name="span">The location of the end of the stream.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.EndOfStreamToken">
	<summary>
 A token representing the end of the file.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ArgumentCollection.RightParenthesisLocation">
	<summary>
 The location of the ')'.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ArgumentCollection.#ctor(System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Argument},System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Location},Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new argument collection.
 </summary>
	<param name="arguments">The arguments in the collection.</param>
	<param name="commaLocations">The location of the commas in the collection.</param>
	<param name="rightParenthesisLocation">The location of the ')'.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ArgumentCollection">
	<summary>
 A read-only collection of arguments.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.RangeCaseClause.RangeExpression">
	<summary>
 The range expression.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.RangeCaseClause.#ctor(Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new range case clause parse tree.
 </summary>
	<param name="rangeExpression">The range expression.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.RangeCaseClause">
	<summary>
 A parse tree for a case clause that compares against a range of values.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.GenericQualifiedExpression.Base">
	<summary>
 The base expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.GenericQualifiedExpression.TypeArguments">
	<summary>
 The qualifying type arguments.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.GenericQualifiedExpression.#ctor(Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.TypeArgumentCollection,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for a generic qualified expression.
 </summary>
	<param name="base">The base expression.</param>
	<param name="typeArguments">The qualifying type arguments.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.GenericQualifiedExpression">
	<summary>
 A parse tree for a qualified name expression.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.EmptyDeclaration.#ctor(Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for an empty declaration.
 </summary>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.EmptyDeclaration">
	<summary>
 A parse tree for an empty declaration.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.InterfaceDeclaration.#ctor(Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.ModifierCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.SimpleName,Dlrsoft.VBScript.Parser.TypeParameterCollection,Dlrsoft.VBScript.Parser.DeclarationCollection,Dlrsoft.VBScript.Parser.EndBlockDeclaration,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a Interface declaration.
 </summary>
	<param name="attributes">The attributes for the parse tree.</param>
	<param name="modifiers">The modifiers for the parse tree.</param>
	<param name="keywordLocation">The location of the keyword.</param>
	<param name="name">The name of the declaration.</param>
	<param name="typeParameters">The type parameters on the declaration, if any.</param>
	<param name="declarations">The declarations in the block.</param>
	<param name="endStatement">The end block declaration, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.InterfaceDeclaration">
	<summary>
 A parse tree for a Interface declaration.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ParentheticalExpression.RightParenthesisLocation">
	<summary>
 The location of the ')'.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ParentheticalExpression.#ctor(Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parenthesized expression parse tree.
 </summary>
	<param name="operand">The operand of the expression.</param>
	<param name="rightParenthesisLocation">The location of the ')'.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ParentheticalExpression">
	<summary>
 A parse tree for a parenthesized expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.SimpleNameExpression.Name">
	<summary>
 The name.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.SimpleNameExpression.#ctor(Dlrsoft.VBScript.Parser.SimpleName,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for a simple name expression.
 </summary>
	<param name="name">The name.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.SimpleNameExpression">
	<summary>
 A parse tree for a simple name expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.InitializerCollection.RightCurlyBraceLocation">
	<summary>
 The location of the '}'.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.InitializerCollection.#ctor(System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Initializer},System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Location},Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new initializer collection.
 </summary>
	<param name="initializers">The initializers in the collection.</param>
	<param name="commaLocations">The locations of the commas in the collection.</param>
	<param name="rightCurlyBraceLocation">The location of the '}'.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.InitializerCollection">
	<summary>
 A read-only collection of initializers.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CallStatement.CallLocation">
	<summary>
 The location of the 'Call', if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CallStatement.TargetExpression">
	<summary>
 The target of the call.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CallStatement.Arguments">
	<summary>
 The arguments to the call.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.CallStatement.#ctor(Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.ArgumentCollection,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a method call statement.
 </summary>
	<param name="callLocation">The location of the 'Call', if any.</param>
	<param name="targetExpression">The target of the call.</param>
	<param name="arguments">The arguments to the call.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.CallStatement">
	<summary>
 A parse tree for a method call statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.LocalDeclarationStatement.Modifiers">
	<summary>
 The statement modifiers.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.LocalDeclarationStatement.VariableDeclarators">
	<summary>
 The variable declarators.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.LocalDeclarationStatement.#ctor(Dlrsoft.VBScript.Parser.ModifierCollection,Dlrsoft.VBScript.Parser.VariableDeclaratorCollection,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a local declaration statement.
 </summary>
	<param name="modifiers">The statement modifiers.</param>
	<param name="variableDeclarators">The variable declarators.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.LocalDeclarationStatement">
	<summary>
 A parse tree for a local declaration statement.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.StatementCollection.#ctor(System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Statement},System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Location},Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new collection of statements.
 </summary>
	<param name="statements">The statements in the collection.</param>
	<param name="colonLocations">The locations of the colons in the collection.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.StatementCollection">
	<summary>
 A read-only collection of statements.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.VariableDeclarator.VariableNames">
	<summary>
 The variable names being declared.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.VariableDeclarator.AsLocation">
	<summary>
 The location of the 'As', if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.VariableDeclarator.NewLocation">
	<summary>
 The location of the 'New', if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.VariableDeclarator.VariableType">
	<summary>
 The type of the variables being declared, if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.VariableDeclarator.Arguments">
	<summary>
 The arguments to the constructor, if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.VariableDeclarator.EqualsLocation">
	<summary>
 The location of the '=', if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.VariableDeclarator.Initializer">
	<summary>
 The variable initializer, if any.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.VariableDeclarator.#ctor(Dlrsoft.VBScript.Parser.VariableNameCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.TypeName,Dlrsoft.VBScript.Parser.ArgumentCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Initializer,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for a variable declarator.
 </summary>
	<param name="variableNames">The names of the variables being declared.</param>
	<param name="asLocation">The location of the 'As', if any.</param>
	<param name="newLocation">The location of the 'New', if any.</param>
	<param name="variableType">The type of the variables being declared, if any.</param>
	<param name="arguments">The arguments of the constructor, if any.</param>
	<param name="equalsLocation">The location of the '=', if any.</param>
	<param name="initializer">The variable initializer, if any.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.VariableDeclarator">
	<summary>
 A parse tree for a variable declarator (e.g. "x As Integer")
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CommentToken.IsREM">
	<summary>
 Whether the comment was preceded by REM.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CommentToken.Comment">
	<summary>
 The text of the comment.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.CommentToken.#ctor(System.String,System.Boolean,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new comment token.
 </summary>
	<param name="comment">The comment value.</param>
	<param name="isREM">Whether the comment was preceded by REM.</param>
	<param name="span">The location of the comment.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.CommentToken">
	<summary>
 A comment token.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.InheritsDeclaration.InheritedTypes">
	<summary>
 The list of types.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.InheritsDeclaration.#ctor(Dlrsoft.VBScript.Parser.TypeNameCollection,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a parse tree for an Inherits declaration.
 </summary>
	<param name="inheritedTypes">The types inherited or implemented.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.InheritsDeclaration">
	<summary>
 A parse tree for an Inherits declaration.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CallOrIndexExpression.TargetExpression">
	<summary>
 The target of the call or index.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CallOrIndexExpression.Arguments">
	<summary>
 The arguments to the call or index.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.CallOrIndexExpression.#ctor(Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.ArgumentCollection,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for a call or index expression.
 </summary>
	<param name="targetExpression">The target of the call or index.</param>
	<param name="arguments">The arguments to the call or index.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.CallOrIndexExpression">
	<summary>
 A parse tree for a call or index expression.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.InstanceType">
	<summary>
 The type of an instance expression.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.Import">
	<summary>
 A parse tree for an Imports statement.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.AddHandlerStatement.#ctor(Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for an AddHandler statement.
 </summary>
	<param name="name">The name of the event.</param>
	<param name="commaLocation">The location of the ','.</param>
	<param name="delegateExpression">The delegate expression.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.AddHandlerStatement">
	<summary>
 A parse tree for an AddHandler statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CaseStatement.CaseClauses">
	<summary>
 The clauses in the Case statement.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.CaseStatement.#ctor(Dlrsoft.VBScript.Parser.CaseClauseCollection,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a Case statement.
 </summary>
	<param name="caseClauses">The clauses in the Case statement.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments on the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.CaseStatement">
	<summary>
 A parse tree for a Case statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ElseIfBlockStatement.ElseIfStatement">
	<summary>
 The Else If statement.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ElseIfBlockStatement.#ctor(Dlrsoft.VBScript.Parser.ElseIfStatement,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for an Else If block statement.
 </summary>
	<param name="elseIfStatement">The Else If statement.</param>
	<param name="statements">The statements in the block.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ElseIfBlockStatement">
	<summary>
 A parse tree for an Else If block statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ExpressionBlockStatement.Expression">
	<summary>
 The expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ExpressionBlockStatement.EndStatement">
	<summary>
 The End statement for the block, if any.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.ExpressionBlockStatement">
	<summary>
 A parse tree for an expression block statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.LineIfStatement.Expression">
	<summary>
 The conditional expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.LineIfStatement.ThenLocation">
	<summary>
 The location of the 'Then'.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.LineIfStatement.IfStatements">
	<summary>
 The If statements.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.LineIfStatement.ElseLocation">
	<summary>
 The location of the 'Else', if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.LineIfStatement.ElseStatements">
	<summary>
 The Else statements.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.LineIfStatement.#ctor(Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a line If statement.
 </summary>
	<param name="expression">The conditional expression.</param>
	<param name="thenLocation">The location of the 'Then'.</param>
	<param name="ifStatements">The If statements.</param>
	<param name="elseLocation">The location of the 'Else', if any.</param>
	<param name="elseStatements">The Else statements.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.LineIfStatement">
	<summary>
 A parse tree for a line If statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ReDimStatement.PreserveLocation">
	<summary>
 The location of the 'Preserve', if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ReDimStatement.Variables">
	<summary>
 The variables to redimension (includes bounds).
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ReDimStatement.IsPreserve">
	<summary>
 Whether the statement included a Preserve keyword.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ReDimStatement.#ctor(Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.ExpressionCollection,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a ReDim statement.
 </summary>
	<param name="preserveLocation">The location of the 'Preserve', if any.</param>
	<param name="variables">The variables to redimension (includes bounds).</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ReDimStatement">
	<summary>
 A parse tree for a ReDim statement.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.ResumeType">
	<summary>
 The type of a Resume statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.TypeParameterCollection.OfLocation">
	<summary>
 The location of the 'Of'.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.TypeParameterCollection.RightParenthesisLocation">
	<summary>
 The location of the ')'.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.TypeParameterCollection.#ctor(Dlrsoft.VBScript.Parser.Location,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.TypeParameter},System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Location},Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new collection of type parameters.
 </summary>
	<param name="ofLocation">The location of the 'Of'.</param>
	<param name="parameters">The type parameters in the collection</param>
	<param name="commaLocations">The locations of the commas.</param>
	<param name="rightParenthesisLocation">The location of the right parenthesis.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.TypeParameterCollection">
	<summary>
 A collection of type parameters.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.DateLiteralToken.Literal">
	<summary>
 The literal value.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.DateLiteralToken.#ctor(System.DateTime,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new date literal instance.
 </summary>
	<param name="literal">The literal value.</param>
	<param name="span">The location of the literal.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.DateLiteralToken">
	<summary>
 A date/time literal.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CustomEventDeclaration.CustomLocation">
	<summary>
 The location of the 'Custom' keyword.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CustomEventDeclaration.ImplementsList">
	<summary>
 The list of implemented members.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CustomEventDeclaration.Accessors">
	<summary>
 The event accessors.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CustomEventDeclaration.EndDeclaration">
	<summary>
 The End Event declaration, if any.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.CustomEventDeclaration.#ctor(Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.ModifierCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.SimpleName,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.TypeName,Dlrsoft.VBScript.Parser.NameCollection,Dlrsoft.VBScript.Parser.DeclarationCollection,Dlrsoft.VBScript.Parser.EndBlockDeclaration,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a custom property declaration.
 </summary>
	<param name="attributes">The attributes on the declaration.</param>
	<param name="modifiers">The modifiers on the declaration.</param>
	<param name="customLocation">The location of the 'Custom' keyword.</param>
	<param name="keywordLocation">The location of the keyword.</param>
	<param name="name">The name of the custom event.</param>
	<param name="asLocation">The location of the 'As', if any.</param>
	<param name="resultType">The result type, if any.</param>
	<param name="implementsList">The implements list.</param>
	<param name="accessors">The custom event accessors.</param>
	<param name="endDeclaration">The End Event declaration, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.CustomEventDeclaration">
	<summary>
 A parse tree for a custom event declaration.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CastTypeExpression.LeftParenthesisLocation">
	<summary>
 The location of the '('.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CastTypeExpression.CommaLocation">
	<summary>
 The location of the ','.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CastTypeExpression.Target">
	<summary>
 The target type for the operand.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CastTypeExpression.RightParenthesisLocation">
	<summary>
 The location of the ')'.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.CastTypeExpression">
	<summary>
 A parse tree for a CType or DirectCast expression.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.NothingExpression.#ctor(Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for Nothing.
 </summary>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.NothingExpression">
	<summary>
 A parse tree for Nothing.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.NameCollection.#ctor(System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Name},System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Location},Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new name collection.
 </summary>
	<param name="names">The names in the collection.</param>
	<param name="commaLocations">The locations of the commas in the collection.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.NameCollection">
	<summary>
 A read-only collection of names.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CaseElseStatement.ElseLocation">
	<summary>
 The location of the 'Else'.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.CaseElseStatement.#ctor(Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a Case Else statement.
 </summary>
	<param name="elseLocation">The location of the 'Else'.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.CaseElseStatement">
	<summary>
 A parse tree for a Case Else statement.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.EndStatement.#ctor(Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for an End statement.
 </summary>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.EndStatement">
	<summary>
 A parse tree for an End statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.SelectBlockStatement.CaseLocation">
	<summary>
 The location of the 'Case', if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.SelectBlockStatement.Expression">
	<summary>
 The location of the select expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.SelectBlockStatement.CaseBlockStatements">
	<summary>
 The Case statements.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.SelectBlockStatement.CaseElseBlockStatement">
	<summary>
 The Case Else statement, if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.SelectBlockStatement.EndStatement">
	<summary>
 The End Select statement, if any.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.SelectBlockStatement.#ctor(Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.CaseElseBlockStatement,Dlrsoft.VBScript.Parser.EndBlockStatement,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a Select statement.
 </summary>
	<param name="caseLocation">The location of the 'Case', if any.</param>
	<param name="expression">The select expression.</param>
	<param name="caseBlockStatements">The Case statements.</param>
	<param name="caseElseBlockStatement">The Case Else statement, if any.</param>
	<param name="endStatement">The End Select statement, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.SelectBlockStatement">
	<summary>
 A parse tree for a Select statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Statement.Comments">
	<summary>
 The comments for the tree.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.Statement">
	<summary>
 A parse tree for a statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.TryBlockStatement.CatchBlockStatements">
	<summary>
 The Catch statements.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.TryBlockStatement.FinallyBlockStatement">
	<summary>
 The Finally statement, if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.TryBlockStatement.EndStatement">
	<summary>
 The End Try statement, if any.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.TryBlockStatement.#ctor(Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.FinallyBlockStatement,Dlrsoft.VBScript.Parser.EndBlockStatement,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a Try statement.
 </summary>
	<param name="statements">The statements in the Try block.</param>
	<param name="catchBlockStatements">The Catch statements.</param>
	<param name="finallyBlockStatement">The Finally statement, if any.</param>
	<param name="endStatement">The End Try statement, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.TryBlockStatement">
	<summary>
 A parse tree for a Try statement.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.WhileBlockStatement.#ctor(Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.EndBlockStatement,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a While statement block.
 </summary>
	<param name="expression">The expression.</param>
	<param name="statements">The statements in the block.</param>
	<param name="endStatement">The End statement for the block, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.WhileBlockStatement">
	<summary>
 A parse tree for a While block statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.TypeParameter.TypeName">
	<summary>
 The name of the type parameter.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.TypeParameter.AsLocation">
	<summary>
 The location of the 'As', if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.TypeParameter.TypeConstraints">
	<summary>
 The constraints, if any.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.TypeParameter.#ctor(Dlrsoft.VBScript.Parser.SimpleName,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.TypeConstraintCollection,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parameter parse tree.
 </summary>
	<param name="typeName">The name of the type parameter.</param>
	<param name="asLocation">The location of the 'As'.</param>
	<param name="typeConstraints">The constraints on the type parameter. Can be Nothing.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.TypeParameter">
	<summary>
 A parse tree for a type parameter.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.TypeArgumentCollection.OfLocation">
	<summary>
 The location of the 'Of'.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.TypeArgumentCollection.RightParenthesisLocation">
	<summary>
 The location of the ')'.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.TypeArgumentCollection.#ctor(Dlrsoft.VBScript.Parser.Location,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.TypeName},System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Location},Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new collection of type arguments.
 </summary>
	<param name="ofLocation">The location of the 'Of'.</param>
	<param name="arguments">The type arguments in the collection</param>
	<param name="commaLocations">The locations of the commas.</param>
	<param name="rightParenthesisLocation">The location of the right parenthesis.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.TypeArgumentCollection">
	<summary>
 A collection of type arguments.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.Parser.Dispose">
	<summary>
 Disposes the parser.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.Parser.ParseFile(Dlrsoft.VBScript.Parser.Scanner,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.SyntaxError})">
	<summary>
 Parse an entire file.
 </summary>
	<param name="scanner">The scanner to use to fetch the tokens.</param>
	<param name="errorTable">The list of errors produced during parsing.</param>
	<returns>A file-level parse tree.</returns>
</member><member name="M:Dlrsoft.VBScript.Parser.Parser.ParseFile(Dlrsoft.VBScript.Parser.Scanner,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.SyntaxError},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.SourceRegion},System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.ExternalLineMapping},System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.ExternalChecksum})">
	<summary>
 Parse an entire file.
 </summary>
	<param name="scanner">The scanner to use to fetch the tokens.</param>
	<param name="errorTable">The list of errors produced during parsing.</param>
	<param name="conditionalCompilationConstants">Pre-defined conditional compilation constants.</param>
	<param name="sourceRegions">Source regions defined in the file.</param>
	<param name="externalLineMappings">External line mappings defined in the file.</param>
	<returns>A file-level parse tree.</returns>
</member><member name="M:Dlrsoft.VBScript.Parser.Parser.ParseDeclaration(Dlrsoft.VBScript.Parser.Scanner,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.SyntaxError})">
	<summary>
 Parse a declaration.
 </summary>
	<param name="scanner">The scanner to use to fetch the tokens.</param>
	<param name="errorTable">The list of errors produced during parsing.</param>
	<returns>A declaration-level parse tree.</returns>
</member><member name="M:Dlrsoft.VBScript.Parser.Parser.ParseStatement(Dlrsoft.VBScript.Parser.Scanner,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.SyntaxError})">
	<summary>
 Parse a statement.
 </summary>
	<param name="scanner">The scanner to use to fetch the tokens.</param>
	<param name="errorTable">The list of errors produced during parsing.</param>
	<returns>A statement-level parse tree.</returns>
</member><member name="M:Dlrsoft.VBScript.Parser.Parser.ParseExpression(Dlrsoft.VBScript.Parser.Scanner,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.SyntaxError})">
	<summary>
 Parse an expression.
 </summary>
	<param name="scanner">The scanner to use to fetch the tokens.</param>
	<param name="errorTable">The list of errors produced during parsing.</param>
	<returns>An expression-level parse tree.</returns>
</member><member name="M:Dlrsoft.VBScript.Parser.Parser.ParseTypeName(Dlrsoft.VBScript.Parser.Scanner,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.SyntaxError})">
	<summary>
 Parse a type name.
 </summary>
	<param name="scanner">The scanner to use to fetch the tokens.</param>
	<param name="errorTable">The list of errors produced during parsing.</param>
	<returns>A typename-level parse tree.</returns>
</member><member name="T:Dlrsoft.VBScript.Parser.Parser">
	<summary>
 A parser for the Visual Basic .NET language based on the grammar
 documented in the Language Specification.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.EndBlockDeclaration.EndType">
	<summary>
 The type of block the declaration ends.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.EndBlockDeclaration.EndArgumentLocation">
	<summary>
 The location of the end block argument.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.EndBlockDeclaration.#ctor(Dlrsoft.VBScript.Parser.BlockType,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Creates a new parse tree for an End block declaration.
 </summary>
	<param name="endType">The type of the block the statement ends.</param>
	<param name="endArgumentLocation">The location of the end block argument.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.EndBlockDeclaration">
	<summary>
 A parse tree for an End declaration.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.EventDeclaration.ImplementsList">
	<summary>
 The list of implemented members.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.EventDeclaration.#ctor(Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.ModifierCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.SimpleName,Dlrsoft.VBScript.Parser.ParameterCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.TypeName,Dlrsoft.VBScript.Parser.NameCollection,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a parse tree for an event declaration.
 </summary>
	<param name="attributes">The attributes for the parse tree.</param>
	<param name="modifiers">The modifiers for the parse tree.</param>
	<param name="keywordLocation">The location of the keyword.</param>
	<param name="name">The name of the declaration.</param>
	<param name="parameters">The parameters of the declaration.</param>
	<param name="asLocation">The location of the 'As', if any.</param>
	<param name="resultTypeAttributes">The attributes on the result type, if any.</param>
	<param name="resultType">The result type, if any.</param>
	<param name="implementsList">The list of implemented members.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.EventDeclaration">
	<summary>
 A parse tree for an event declaration.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.SetAccessorDeclaration.SetLocation">
	<summary>
 The location of the 'Set'.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.SetAccessorDeclaration.Parameters">
	<summary>
 The accessor's parameters.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.SetAccessorDeclaration.Statements">
	<summary>
 The statements in the accessor.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.SetAccessorDeclaration.EndDeclaration">
	<summary>
 The End declaration for the accessor.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.SetAccessorDeclaration.#ctor(Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.ModifierCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.ParameterCollection,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.EndBlockDeclaration,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a property accessor.
 </summary>
	<param name="attributes">The attributes for the parse tree.</param>
	<param name="modifiers">The modifiers for the parse tree.</param>
	<param name="setLocation">The location of the 'Set'.</param>
	<param name="parameters">The parameters of the declaration.</param>
	<param name="statements">The statements in the declaration.</param>
	<param name="endDeclaration">The end block declaration, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.SetAccessorDeclaration">
	<summary>
 A parse tree for a Set property accessor.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.CTypeExpression.#ctor(Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.TypeName,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for a CType expression.
 </summary>
	<param name="leftParenthesisLocation">The location of the '('.</param>
	<param name="operand">The expression to be converted.</param>
	<param name="commaLocation">The location of the ','.</param>
	<param name="target">The target type of the conversion.</param>
	<param name="rightParenthesisLocation">The location of the ')'.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.CTypeExpression">
	<summary>
 A parse tree for a CType expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.DictionaryLookupExpression.Qualifier">
	<summary>
 The dictionary expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.DictionaryLookupExpression.BangLocation">
	<summary>
 The location of the '!'.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.DictionaryLookupExpression.Name">
	<summary>
 The name to look up.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.DictionaryLookupExpression.#ctor(Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.SimpleName,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for a dictionary lookup expression.
 </summary>
	<param name="qualifier">The dictionary expression.</param>
	<param name="bangLocation">The location of the '!'.</param>
	<param name="name">The name to look up..</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.DictionaryLookupExpression">
	<summary>
 A parse tree for a dictionary lookup expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.NameImport.TypeName">
	<summary>
 The imported name.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.NameImport.#ctor(Dlrsoft.VBScript.Parser.TypeName,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new name import parse tree.
 </summary>
	<param name="typeName">The name to import.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.NameImport">
	<summary>
 A parse tree for an Imports statement for a name.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ModifierCollection.ModifierTypes">
	<summary>
 All the modifiers in the collection.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ModifierCollection.#ctor(System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Modifier},Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a collection of modifiers.
 </summary>
	<param name="modifiers">The modifiers in the collection.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ModifierCollection">
	<summary>
 A read-only collection of modifiers.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CatchStatement.Name">
	<summary>
 The name of the catch variable, if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CatchStatement.AsLocation">
	<summary>
 The location of the 'As', if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CatchStatement.ExceptionType">
	<summary>
 The type of the catch variable, if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CatchStatement.WhenLocation">
	<summary>
 The location of the 'When', if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CatchStatement.FilterExpression">
	<summary>
 The filter expression, if any.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.CatchStatement.#ctor(Dlrsoft.VBScript.Parser.SimpleName,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.TypeName,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a Catch statement.
 </summary>
	<param name="name">The name of the catch variable, if any.</param>
	<param name="asLocation">The location of the 'As', if any.</param>
	<param name="exceptionType">The type of the catch variable, if any.</param>
	<param name="whenLocation">The location of the 'When', if any.</param>
	<param name="filterExpression">The filter expression, if any.</param>
	<param name="span">The location of the parse tree, if any.</param>
	<param name="comments">The comments for the parse tree, if any.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.CatchStatement">
	<summary>
 A parse tree for a Catch statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ElseIfStatement.Expression">
	<summary>
 The conditional expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ElseIfStatement.ThenLocation">
	<summary>
 The location of the 'Then', if any.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ElseIfStatement.#ctor(Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for an Else If statement.
 </summary>
	<param name="expression">The conditional expression.</param>
	<param name="thenLocation">The location of the 'Then', if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ElseIfStatement">
	<summary>
 A parse tree for an Else If statement.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ElseStatement.#ctor(Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for an Else statement.
 </summary>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ElseStatement">
	<summary>
 A parse tree for an Else statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Argument.Name">
	<summary>
 The name of the argument, if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Argument.ColonEqualsLocation">
	<summary>
 The location of the ':=', if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Argument.Expression">
	<summary>
 The argument, if any.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.Argument.#ctor(Dlrsoft.VBScript.Parser.SimpleName,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for an argument.
 </summary>
	<param name="name">The name of the argument, if any.</param>
	<param name="colonEqualsLocation">The location of the ':=', if any.</param>
	<param name="expression">The expression, if any.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.Argument">
	<summary>
 A parse tree for an argument to a call or index.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Attribute.AttributeType">
	<summary>
 The target type of the attribute.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Attribute.AttributeTypeLocation">
	<summary>
 The location of the attribute type, if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Attribute.ColonLocation">
	<summary>
 The location of the ':', if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Attribute.Name">
	<summary>
 The name of the attribute being applied.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Attribute.Arguments">
	<summary>
 The arguments to the attribute.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.Attribute.#ctor(Dlrsoft.VBScript.Parser.AttributeTypes,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Name,Dlrsoft.VBScript.Parser.ArgumentCollection,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new attribute parse tree.
 </summary>
	<param name="attributeType">The target type of the attribute.</param>
	<param name="attributeTypeLocation">The location of the attribute type.</param>
	<param name="colonLocation">The location of the ':'.</param>
	<param name="name">The name of the attribute being applied.</param>
	<param name="arguments">The arguments to the attribute.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.Attribute">
	<summary>
 A parse tree for an attribute usage.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.AttributeBlockCollection.#ctor(System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.AttributeCollection},Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new collection of attribute blocks.
 </summary>
	<param name="attributeBlocks">The attribute blockss in the collection.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.AttributeBlockCollection">
	<summary>
 A read-only collection of attributes.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.GenericBlockDeclaration.TypeParameters">
	<summary>
 The type parameters of the type, if any.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.GenericBlockDeclaration">
	<summary>
 A parse tree for a possibly generic block declaration.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.Declaration.GetBadDeclaration(Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Creates a bad declaration.
 </summary>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
	<returns>A bad declaration.</returns>
</member><member name="T:Dlrsoft.VBScript.Parser.Declaration">
	<summary>
 A parse tree for a declaration.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ExternalFunctionDeclaration.#ctor(Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.ModifierCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Charset,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.SimpleName,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.StringLiteralExpression,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.StringLiteralExpression,Dlrsoft.VBScript.Parser.ParameterCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.TypeName,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a parse tree for a Declare Function statement.
 </summary>
	<param name="attributes">The attributes for the parse tree.</param>
	<param name="modifiers">The modifiers for the parse tree.</param>
	<param name="keywordLocation">The location of the keyword.</param>
	<param name="charsetLocation">The location of the 'Ansi', 'Auto' or 'Unicode', if any.</param>
	<param name="charset">The charset.</param>
	<param name="functionLocation">The location of 'Function'.</param>
	<param name="name">The name of the declaration.</param>
	<param name="libLocation">The location of 'Lib', if any.</param>
	<param name="libLiteral">The library, if any.</param>
	<param name="aliasLocation">The location of 'Alias', if any.</param>
	<param name="aliasLiteral">The alias, if any.</param>
	<param name="parameters">The parameters of the declaration.</param>
	<param name="asLocation">The location of the 'As', if any.</param>
	<param name="resultTypeAttributes">The attributes on the result type, if any.</param>
	<param name="resultType">The result type, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ExternalFunctionDeclaration">
	<summary>
 A parse tree for a Declare Function statement.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.SubDeclaration.#ctor(Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.ModifierCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.SimpleName,Dlrsoft.VBScript.Parser.TypeParameterCollection,Dlrsoft.VBScript.Parser.ParameterCollection,Dlrsoft.VBScript.Parser.NameCollection,Dlrsoft.VBScript.Parser.NameCollection,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.EndBlockDeclaration,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Creates a new parse tree for a Sub declaration.
 </summary>
	<param name="attributes">The attributes for the parse tree.</param>
	<param name="modifiers">The modifiers for the parse tree.</param>
	<param name="keywordLocation">The location of the keyword.</param>
	<param name="name">The name of the declaration.</param>
	<param name="typeParameters">The type parameters on the declaration, if any.</param>
	<param name="parameters">The parameters of the declaration.</param>
	<param name="implementsList">The list of implemented members.</param>
	<param name="handlesList">The list of handled events.</param>
	<param name="statements">The statements in the declaration.</param>
	<param name="endDeclaration">The end block declaration, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.SubDeclaration">
	<summary>
 A parse tree for a Sub declaration.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.IntegerLiteralExpression.Literal">
	<summary>
 The literal value.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.IntegerLiteralExpression.TypeCharacter">
	<summary>
 The type character on the literal.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.IntegerLiteralExpression.IntegerBase">
	<summary>
 The integer base of the literal.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.IntegerLiteralExpression.#ctor(System.Int32,Dlrsoft.VBScript.Parser.IntegerBase,Dlrsoft.VBScript.Parser.TypeCharacter,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for an integer literal.
 </summary>
	<param name="literal">The literal value.</param>
	<param name="integerBase">The integer base of the literal.</param>
	<param name="typeCharacter">The type character on the literal.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.IntegerLiteralExpression">
	<summary>
 A parse tree for an integer literal.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.AssignmentStatement.TargetExpression">
	<summary>
 The target of the assignment.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.AssignmentStatement.OperatorLocation">
	<summary>
 The location of the operator.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.AssignmentStatement.SourceExpression">
	<summary>
 The source of the assignment.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.AssignmentStatement.#ctor(Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment},System.Boolean)">
	<summary>
 Constructs a new parse tree for an assignment statement.
 </summary>
	<param name="targetExpression">The target of the assignment.</param>
	<param name="operatorLocation">The location of the operator.</param>
	<param name="sourceExpression">The source of the assignment.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
	<param name="isSetStatement">Whether is is a set statement</param>
</member><member name="M:Dlrsoft.VBScript.Parser.AssignmentStatement.#ctor(Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for an assignment statement.
 </summary>
	<param name="targetExpression">The target of the assignment.</param>
	<param name="operatorLocation">The location of the operator.</param>
	<param name="sourceExpression">The source of the assignment.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.AssignmentStatement">
	<summary>
 A parse tree for an assignment statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CatchBlockStatement.CatchStatement">
	<summary>
 The Catch statement.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.CatchBlockStatement.#ctor(Dlrsoft.VBScript.Parser.CatchStatement,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a Catch block statement.
 </summary>
	<param name="catchStatement">The Catch statement.</param>
	<param name="statements">The statements in the block.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.CatchBlockStatement">
	<summary>
 A parse tree for a Catch block statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Token.Type">
	<summary>
 The type of the token.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Token.Span">
	<summary>
 The span of the token in the source text.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.Token.AsUnreservedKeyword">
	<summary>
 Returns the unreserved keyword type of an identifier.
 </summary>
	<returns>The unreserved keyword type of an identifier, the token's type otherwise.</returns>
</member><member name="T:Dlrsoft.VBScript.Parser.Token">
	<summary>
 The base class for all tokens. Contains line and column information as well as token type.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.UnsignedIntegerLiteralToken.Literal">
	<summary>
 The value of the literal.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.UnsignedIntegerLiteralToken.TypeCharacter">
	<summary>
 The type character of the literal.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.UnsignedIntegerLiteralToken.IntegerBase">
	<summary>
 The integer base of the literal.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.UnsignedIntegerLiteralToken.#ctor(System.UInt64,Dlrsoft.VBScript.Parser.IntegerBase,Dlrsoft.VBScript.Parser.TypeCharacter,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new unsigned integer literal.
 </summary>
	<param name="literal">The literal value.</param>
	<param name="integerBase">The integer base of the literal.</param>
	<param name="typeCharacter">The type character of the literal.</param>
	<param name="span">The location of the literal.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.UnsignedIntegerLiteralToken">
	<summary>
 An integer literal.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.GlobalExpression.#ctor(Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for Global.
 </summary>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.GlobalExpression">
	<summary>
 A parse tree for Nothing.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ImplementsDeclaration.ImplementedTypes">
	<summary>
 The list of types.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ImplementsDeclaration.#ctor(Dlrsoft.VBScript.Parser.TypeNameCollection,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a parse tree for an Implements declaration.
 </summary>
	<param name="implementedTypes">The types inherited or implemented.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ImplementsDeclaration">
	<summary>
 A parse tree for an Implements declaration.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.SignatureDeclaration.KeywordLocation">
	<summary>
 The location of the declaration's keyword.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.SignatureDeclaration.Name">
	<summary>
 The name of the declaration.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.SignatureDeclaration.TypeParameters">
	<summary>
 The type parameters on the declaration, if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.SignatureDeclaration.Parameters">
	<summary>
 The parameters of the declaration.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.SignatureDeclaration.AsLocation">
	<summary>
 The location of the 'As', if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.SignatureDeclaration.ResultTypeAttributes">
	<summary>
 The result type attributes, if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.SignatureDeclaration.ResultType">
	<summary>
 The result type, if any.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.SignatureDeclaration">
	<summary>
 A parse tree for a declaration with a signature.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.StructureDeclaration.#ctor(Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.ModifierCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.SimpleName,Dlrsoft.VBScript.Parser.TypeParameterCollection,Dlrsoft.VBScript.Parser.DeclarationCollection,Dlrsoft.VBScript.Parser.EndBlockDeclaration,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a Structure declaration.
 </summary>
	<param name="attributes">The attributes for the parse tree.</param>
	<param name="modifiers">The modifiers for the parse tree.</param>
	<param name="keywordLocation">The location of the keyword.</param>
	<param name="name">The name of the declaration.</param>
	<param name="typeParameters">The type parameters on the declaration, if any.</param>
	<param name="declarations">The declarations in the block.</param>
	<param name="endStatement">The end block declaration, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.StructureDeclaration">
	<summary>
 A parse tree for a Structure declaration.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.DateLiteralExpression.Literal">
	<summary>
 The literal value.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.DateLiteralExpression.#ctor(System.DateTime,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for a date literal.
 </summary>
	<param name="literal">The literal value.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.DateLiteralExpression">
	<summary>
 A parse tree for a date literal expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.FloatingPointLiteralExpression.Literal">
	<summary>
 The literal value.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.FloatingPointLiteralExpression.TypeCharacter">
	<summary>
 The type character on the literal value.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.FloatingPointLiteralExpression.#ctor(System.Double,Dlrsoft.VBScript.Parser.TypeCharacter,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for a floating point literal.
 </summary>
	<param name="literal">The literal value.</param>
	<param name="typeCharacter">The type character on the literal.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.FloatingPointLiteralExpression">
	<summary>
 A parse tree for a floating point literal.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.LiteralExpression">
	<summary>
 A parse tree for a literal expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.NewExpression.Target">
	<summary>
 The target type to create.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.NewExpression.Arguments">
	<summary>
 The arguments to the constructor.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.NewExpression.#ctor(Dlrsoft.VBScript.Parser.TypeName,Dlrsoft.VBScript.Parser.ArgumentCollection,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for a New expression.
 </summary>
	<param name="target">The target type to create.</param>
	<param name="arguments">The arguments to the constructor.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.NewExpression">
	<summary>
 A parse tree for a New expression.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.OperatorType">
	<summary>
 The type of a unary operator expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.FinallyBlockStatement.FinallyStatement">
	<summary>
 The Finally statement.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.FinallyBlockStatement.#ctor(Dlrsoft.VBScript.Parser.FinallyStatement,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a Finally block statement.
 </summary>
	<param name="finallyStatement">The Finally statement.</param>
	<param name="statements">The statements in the block.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.FinallyBlockStatement">
	<summary>
 A parse tree for a Finally block statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.NextStatement.Variables">
	<summary>
 The loop control variables.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.NextStatement.#ctor(Dlrsoft.VBScript.Parser.ExpressionCollection,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a parse tree for a Next statement.
 </summary>
	<param name="variables">The loop control variables.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.NextStatement">
	<summary>
 A parse tree for a Next statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ConstructedTypeName.TypeArguments">
	<summary>
 The type arguments.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ConstructedTypeName.#ctor(Dlrsoft.VBScript.Parser.Name,Dlrsoft.VBScript.Parser.TypeArgumentCollection,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for a generic constructed type name.
 </summary>
	<param name="name">The generic type being constructed.</param>
	<param name="typeArguments">The type arguments.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ConstructedTypeName">
	<summary>
 A parse tree for a constructed generic type name.
 </summary>
</member><member name="F:Dlrsoft.VBScript.Parser.TypeCharacter.None">
	<summary>No type character</summary>
</member><member name="F:Dlrsoft.VBScript.Parser.TypeCharacter.StringSymbol">
	<summary>The String symbol '$'.</summary>
</member><member name="F:Dlrsoft.VBScript.Parser.TypeCharacter.IntegerSymbol">
	<summary>The Integer symbol '%'.</summary>
</member><member name="F:Dlrsoft.VBScript.Parser.TypeCharacter.LongSymbol">
	<summary>The Long symbol '&amp;'.</summary>
</member><member name="F:Dlrsoft.VBScript.Parser.TypeCharacter.ShortChar">
	<summary>The Short character 'S'.</summary>
</member><member name="F:Dlrsoft.VBScript.Parser.TypeCharacter.IntegerChar">
	<summary>The Integer character 'I'.</summary>
</member><member name="F:Dlrsoft.VBScript.Parser.TypeCharacter.LongChar">
	<summary>The Long character 'L'.</summary>
</member><member name="F:Dlrsoft.VBScript.Parser.TypeCharacter.SingleSymbol">
	<summary>The Single symbol '!'.</summary>
</member><member name="F:Dlrsoft.VBScript.Parser.TypeCharacter.DoubleSymbol">
	<summary>The Double symbol '#'.</summary>
</member><member name="F:Dlrsoft.VBScript.Parser.TypeCharacter.DecimalSymbol">
	<summary>The Decimal symbol '@'.</summary>
</member><member name="F:Dlrsoft.VBScript.Parser.TypeCharacter.SingleChar">
	<summary>The Single character 'F'.</summary>
</member><member name="F:Dlrsoft.VBScript.Parser.TypeCharacter.DoubleChar">
	<summary>The Double character 'R'.</summary>
</member><member name="F:Dlrsoft.VBScript.Parser.TypeCharacter.DecimalChar">
	<summary>The Decimal character 'D'.</summary>
</member><member name="F:Dlrsoft.VBScript.Parser.TypeCharacter.UnsignedShortChar">
	<summary>The unsigned Short characters 'US'.</summary>
	<remarks>New for Visual Basic 8.0.</remarks>
</member><member name="F:Dlrsoft.VBScript.Parser.TypeCharacter.UnsignedIntegerChar">
	<summary>The unsigned Integer characters 'UI'.</summary>
	<remarks>New for Visual Basic 8.0.</remarks>
</member><member name="F:Dlrsoft.VBScript.Parser.TypeCharacter.UnsignedLongChar">
	<summary>The unsigned Long characters 'UL'.</summary>
	<remarks>New for Visual Basic 8.0.</remarks>
</member><member name="F:Dlrsoft.VBScript.Parser.TypeCharacter.All">
	<summary>All type characters.</summary>
</member><member name="T:Dlrsoft.VBScript.Parser.TypeCharacter">
	<summary>
 A character that denotes the type of something.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CharacterLiteralToken.Literal">
	<summary>
 The literal value.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.CharacterLiteralToken.#ctor(System.Char,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new character literal token.
 </summary>
	<param name="literal">The literal value.</param>
	<param name="span">The location of the literal.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.CharacterLiteralToken">
	<summary>
 A character literal.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CommaDelimitedTreeCollection`1.CommaLocations">
	<summary>
 The location of the commas in the list.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.CommaDelimitedTreeCollection`1">
	<summary>
 A collection of trees that are delimited by commas.
 </summary>
</member><member name="F:Dlrsoft.VBScript.Parser.IntegerBase.Decimal">
	<summary>Base 10.</summary>
</member><member name="F:Dlrsoft.VBScript.Parser.IntegerBase.Octal">
	<summary>Base 8.</summary>
</member><member name="F:Dlrsoft.VBScript.Parser.IntegerBase.Hexadecimal">
	<summary>Base 16.</summary>
</member><member name="T:Dlrsoft.VBScript.Parser.IntegerBase">
	<summary>
 The numeric base of an integer literal.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.GetAccessorDeclaration.GetLocation">
	<summary>
 The location of the 'Get'.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.GetAccessorDeclaration.Statements">
	<summary>
 The statements in the accessor.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.GetAccessorDeclaration.EndDeclaration">
	<summary>
 The End declaration for the accessor.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.GetAccessorDeclaration.#ctor(Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.ModifierCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.EndBlockDeclaration,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a Get property accessor.
 </summary>
	<param name="attributes">The attributes for the parse tree.</param>
	<param name="modifiers">The modifiers for the parse tree.</param>
	<param name="getLocation">The location of the 'Get'.</param>
	<param name="statements">The statements in the declaration.</param>
	<param name="endDeclaration">The end block declaration, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.GetAccessorDeclaration">
	<summary>
 A parse tree for a Get property accessor.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.NamespaceDeclaration.NamespaceLocation">
	<summary>
 The location of 'Namespace'.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.NamespaceDeclaration.Name">
	<summary>
 The name of the namespace.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.NamespaceDeclaration.Declarations">
	<summary>
 The declarations in the namespace.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.NamespaceDeclaration.EndDeclaration">
	<summary>
 The End Namespace declaration, if any.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.NamespaceDeclaration.#ctor(Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.ModifierCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Name,Dlrsoft.VBScript.Parser.DeclarationCollection,Dlrsoft.VBScript.Parser.EndBlockDeclaration,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a parse tree for a namespace declaration.
 </summary>
	<param name="attributes">The attributes on the declaration.</param>
	<param name="modifiers">The modifiers on the declaration.</param>
	<param name="namespaceLocation">The location of 'Namespace'.</param>
	<param name="name">The name of the namespace.</param>
	<param name="declarations">The declarations in the namespace.</param>
	<param name="endDeclaration">The End Namespace statement, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.NamespaceDeclaration">
	<summary>
 A parse tree for a namespace declaration.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.OptionType">
	<summary>
 The type of an Option declaration.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.QualifiedExpression.Qualifier">
	<summary>
 The expression qualifying the name.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.QualifiedExpression.DotLocation">
	<summary>
 The location of the '.'.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.QualifiedExpression.Name">
	<summary>
 The qualified name.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.QualifiedExpression.#ctor(Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.SimpleName,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for a qualified name expression.
 </summary>
	<param name="qualifier">The expression qualifying the name.</param>
	<param name="dotLocation">The location of the '.'.</param>
	<param name="name">The qualified name.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.QualifiedExpression">
	<summary>
 A parse tree for a qualified name expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.AggregateInitializer.Elements">
	<summary>
 The elements of the aggregate initializer.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.AggregateInitializer.#ctor(Dlrsoft.VBScript.Parser.InitializerCollection,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new aggregate initializer parse tree.
 </summary>
	<param name="elements">The elements of the aggregate initializer.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.AggregateInitializer">
	<summary>
 A parse tree for an aggregate initializer.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ReturnStatement.#ctor(Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a Return statement.
 </summary>
	<param name="expression">The expression.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ReturnStatement">
	<summary>
 A parse tree for an expression statement.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.SyncLockBlockStatement.#ctor(Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.EndBlockStatement,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a SyncLock statement block.
 </summary>
	<param name="expression">The expression.</param>
	<param name="statements">The statements in the block.</param>
	<param name="endStatement">The End statement for the block, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.SyncLockBlockStatement">
	<summary>
 A parse tree for a SyncLock block statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ErrorToken.SyntaxError">
	<summary>
 The syntax error that represents the lexical error.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ErrorToken.#ctor(Dlrsoft.VBScript.Parser.SyntaxErrorType,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Creates a new lexical error token.
 </summary>
	<param name="errorType">The type of the error.</param>
	<param name="span">The location of the error.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ErrorToken">
	<summary>
 A lexical error.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.PunctuatorToken.#ctor(Dlrsoft.VBScript.Parser.TokenType,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new punctuator token.
 </summary>
	<param name="type">The punctuator token type.</param>
	<param name="span">The location of the punctuator.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.PunctuatorToken">
	<summary>
 A punctuation token.
 </summary>
</member><member name="F:Dlrsoft.VBScript.Parser.AttributeTypes.Regular">
	<summary>Regular application.</summary>
</member><member name="F:Dlrsoft.VBScript.Parser.AttributeTypes.Module">
	<summary>Applied to the netmodule.</summary>
</member><member name="F:Dlrsoft.VBScript.Parser.AttributeTypes.Assembly">
	<summary>Applied to the assembly.</summary>
</member><member name="T:Dlrsoft.VBScript.Parser.AttributeTypes">
	<summary>
 The type of an attribute usage.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.CaseClauseCollection.#ctor(System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.CaseClause},System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Location},Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new collection of case clauses.
 </summary>
	<param name="caseClauses">The case clauses in the collection.</param>
	<param name="commaLocations">The locations of the commas in the list.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.CaseClauseCollection">
	<summary>
 A collection of case clauses.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.TreeType">
	<summary>
 The type of a tree.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ExternalChecksum.Filename">
	<summary>
 The filename that the checksum is for.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ExternalChecksum.Guid">
	<summary>
 The guid of the file.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ExternalChecksum.Checksum">
	<summary>
 The checksum for the file.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ExternalChecksum.#ctor(System.String,System.String,System.String)">
	<summary>
 Constructs a new external checksum.
 </summary>
	<param name="filename">The filename that the checksum is for.</param>
	<param name="guid">The guid of the file.</param>
	<param name="checksum">The checksum for the file.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ExternalChecksum">
	<summary>
 An external checksum for a file.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.AttributeDeclaration.Attributes">
	<summary>
 The attributes.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.AttributeDeclaration.#ctor(Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for assembly-level or module-level attribute declarations.
 </summary>
	<param name="attributes">The attributes.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.AttributeDeclaration">
	<summary>
 A parse tree for an assembly-level or module-level attribute declaration.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.RemoveHandlerAccessorDeclaration.RemoveHandlerLocation">
	<summary>
 The location of the 'RemoveHandler'.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.RemoveHandlerAccessorDeclaration.Parameters">
	<summary>
 The accessor's parameters.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.RemoveHandlerAccessorDeclaration.Statements">
	<summary>
 The statements in the accessor.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.RemoveHandlerAccessorDeclaration.EndStatement">
	<summary>
 The End declaration for the accessor.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.RemoveHandlerAccessorDeclaration.#ctor(Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.ParameterCollection,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.EndBlockDeclaration,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a property accessor.
 </summary>
	<param name="attributes">The attributes for the parse tree.</param>
	<param name="removeHandlerLocation">The location of the 'RemoveHandler'.</param>
	<param name="parameters">The parameters of the declaration.</param>
	<param name="statements">The statements in the declaration.</param>
	<param name="endStatement">The end block declaration, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.RemoveHandlerAccessorDeclaration">
	<summary>
 A parse tree for a RemoveHandler property accessor.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.DelegateFunctionDeclaration.#ctor(Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.ModifierCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.SimpleName,Dlrsoft.VBScript.Parser.TypeParameterCollection,Dlrsoft.VBScript.Parser.ParameterCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.TypeName,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a delegate declaration.
 </summary>
	<param name="attributes">The attributes for the parse tree.</param>
	<param name="modifiers">The modifiers for the parse tree.</param>
	<param name="keywordLocation">The location of the keyword.</param>
	<param name="functionLocation">The location of the 'Function'.</param>
	<param name="name">The name of the declaration.</param>
	<param name="typeParameters">The type parameters of the declaration, if any.</param>
	<param name="parameters">The parameters of the declaration.</param>
	<param name="asLocation">The location of the 'As', if any.</param>
	<param name="resultTypeAttributes">The attributes on the result type, if any.</param>
	<param name="resultType">The result type, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.DelegateFunctionDeclaration">
	<summary>
 A parse tree for a delegate Function declaration.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.VariableListDeclaration.VariableDeclarators">
	<summary>
 The variables being declared.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.VariableListDeclaration.#ctor(Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.ModifierCollection,Dlrsoft.VBScript.Parser.VariableDeclaratorCollection,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a parse tree for variable declarations.
 </summary>
	<param name="attributes">The attributes on the declaration.</param>
	<param name="modifiers">The modifiers on the declaration.</param>
	<param name="variableDeclarators">The variables being declared.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.VariableListDeclaration">
	<summary>
 A parse tree for variable declarations.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.UnaryOperatorExpression.Operator">
	<summary>
 The operator.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.UnaryOperatorExpression.#ctor(Dlrsoft.VBScript.Parser.OperatorType,Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new unary operator expression parse tree.
 </summary>
	<param name="operator">The type of the unary operator.</param>
	<param name="operand">The operand of the operator.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.UnaryOperatorExpression">
	<summary>
 A parse tree for an unary operator expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.SimpleName.Name">
	<summary>
 The name, if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.SimpleName.TypeCharacter">
	<summary>
 The type character.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.SimpleName.Escaped">
	<summary>
 Whether the name is escaped.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.SimpleName.GetBadSimpleName(Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Creates a bad simple name.
 </summary>
	<param name="Span">The location of the parse tree.</param>
	<returns>A bad simple name.</returns>
</member><member name="M:Dlrsoft.VBScript.Parser.SimpleName.#ctor(System.String,Dlrsoft.VBScript.Parser.TypeCharacter,System.Boolean,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new simple name parse tree.
 </summary>
	<param name="name">The name, if any.</param>
	<param name="typeCharacter">The type character.</param>
	<param name="escaped">Whether the name is escaped.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.SimpleName">
	<summary>
 A parse tree for a simple name (e.g. 'foo').
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CaseBlockStatement.CaseStatement">
	<summary>
 The Case statement that started the block.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.CaseBlockStatement.#ctor(Dlrsoft.VBScript.Parser.CaseStatement,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for the block of a Case statement.
 </summary>
	<param name="caseStatement">The Case statement that started the block.</param>
	<param name="statements">The statements in the block.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments of the tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.CaseBlockStatement">
	<summary>
 A parse tree for the block of a Case statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CaseElseBlockStatement.CaseElseStatement">
	<summary>
 The Case Else statement that started the block.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.CaseElseBlockStatement.#ctor(Dlrsoft.VBScript.Parser.CaseElseStatement,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for the block of a Case Else statement.
 </summary>
	<param name="caseElseStatement">The Case Else statement that started the block.</param>
	<param name="statements">The statements in the block.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments of the tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.CaseElseBlockStatement">
	<summary>
 A parse tree for the block of a Case Else statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.LabelReferenceStatement.Name">
	<summary>
 The name of the label being referred to.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.LabelReferenceStatement.IsLineNumber">
	<summary>
 Whether the label is a line number.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.LabelReferenceStatement">
	<summary>
 A parse tree for a statement that refers to a label.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.RaiseEventStatement.Name">
	<summary>
 The name of the event to raise.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.RaiseEventStatement.Arguments">
	<summary>
 The arguments to the event.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.RaiseEventStatement.#ctor(Dlrsoft.VBScript.Parser.SimpleName,Dlrsoft.VBScript.Parser.ArgumentCollection,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a RaiseEvents statement.
 </summary>
	<param name="name">The name of the event to raise.</param>
	<param name="arguments">The arguments to the event.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.RaiseEventStatement">
	<summary>
 A parse tree for a RaiseEvent statement.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.WithBlockStatement.#ctor(Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.EndBlockStatement,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a With statement block.
 </summary>
	<param name="expression">The expression.</param>
	<param name="statements">The statements in the block.</param>
	<param name="endStatement">The End statement for the block, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.WithBlockStatement">
	<summary>
 A parse tree for a With block statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.SyntaxError.Type">
	<summary>
 The type of the syntax error.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.SyntaxError.Span">
	<summary>
 The location of the syntax error.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.SyntaxError.#ctor(Dlrsoft.VBScript.Parser.SyntaxErrorType,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new syntax error.
 </summary>
	<param name="type">The type of the syntax error.</param>
	<param name="span">The location of the syntax error.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.SyntaxError">
	<summary>
 A syntax error.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.FloatingPointLiteralToken.Literal">
	<summary>
 The value of the literal.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.FloatingPointLiteralToken.TypeCharacter">
	<summary>
 The type character after the literal.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.FloatingPointLiteralToken.#ctor(System.Double,Dlrsoft.VBScript.Parser.TypeCharacter,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new floating point literal token.
 </summary>
	<param name="literal">The literal value.</param>
	<param name="typeCharacter">The type character of the literal.</param>
	<param name="span">The location of the literal.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.FloatingPointLiteralToken">
	<summary>
 A floating point literal.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ScriptBlock.Statements">
	<summary>
 The declarations in the file.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ScriptBlock.#ctor(Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new file parse tree.
 </summary>
	<param name="statements">The statements in the file.</param>
	<param name="span">The location of the tree.</param>
</member><member name="P:Dlrsoft.VBScript.Parser.ContinueStatement.ContinueType">
	<summary>
 The type of tree this statement continues.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ContinueStatement.ContinueArgumentLocation">
	<summary>
 The location of the Continue statement type.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ContinueStatement.#ctor(Dlrsoft.VBScript.Parser.BlockType,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a parse tree for an Continue statement.
 </summary>
	<param name="continueType">The type of tree this statement continues.</param>
	<param name="continueArgumentLocation">The location of the Continue statement type.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ContinueStatement">
	<summary>
 A parse tree for an Continue statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.UsingBlockStatement.VariableDeclarators">
	<summary>
 The variable declarators, if no expression.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.UsingBlockStatement.#ctor(Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.EndBlockStatement,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a Using statement block with an expression.
 </summary>
	<param name="expression">The expression.</param>
	<param name="statements">The statements in the block.</param>
	<param name="endStatement">The End statement for the block, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="M:Dlrsoft.VBScript.Parser.UsingBlockStatement.#ctor(Dlrsoft.VBScript.Parser.VariableDeclaratorCollection,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.EndBlockStatement,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a Using statement block with variable declarators.
 </summary>
	<param name="variableDeclarators">The variable declarators.</param>
	<param name="statements">The statements in the block.</param>
	<param name="endStatement">The End statement for the block, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.UsingBlockStatement">
	<summary>
 A parse tree for a Using block statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.DelegateDeclaration.SubOrFunctionLocation">
	<summary>
 The location of 'Sub' or 'Function'.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.DelegateDeclaration">
	<summary>
 A parse tree for a delegate declaration.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.DirectCastExpression.#ctor(Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.TypeName,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for a DirectCast expression.
 </summary>
	<param name="leftParenthesisLocation">The location of the '('.</param>
	<param name="operand">The expression to be converted.</param>
	<param name="commaLocation">The location of the ','.</param>
	<param name="target">The target type of the conversion.</param>
	<param name="rightParenthesisLocation">The location of the ')'.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.DirectCastExpression">
	<summary>
 A parse tree for a DirectCast expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.TypeOfExpression.IsLocation">
	<summary>
 The location of the 'Is'.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.TypeOfExpression.Target">
	<summary>
 The target type for the operand.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.TypeOfExpression.#ctor(Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.TypeName,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for a TypeOf ... Is expression.
 </summary>
	<param name="operand">The target value.</param>
	<param name="isLocation">The location of the 'Is'.</param>
	<param name="target">The target type to check against.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.TypeOfExpression">
	<summary>
 A parse tree for a TypeOf ... Is expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.TypeReferenceExpression.TypeName">
	<summary>
 The name of the type being referred to.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.TypeReferenceExpression.#ctor(Dlrsoft.VBScript.Parser.TypeName,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for a type reference.
 </summary>
	<param name="typeName">The name of the type being referred to.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.TypeReferenceExpression">
	<summary>
 A parse tree for an expression that refers to a type.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.AliasImport.Name">
	<summary>
 The alias name.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.AliasImport.EqualsLocation">
	<summary>
 The location of the '='.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.AliasImport.AliasedTypeName">
	<summary>
 The name being aliased.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.AliasImport.#ctor(Dlrsoft.VBScript.Parser.SimpleName,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.TypeName,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new aliased import parse tree.
 </summary>
	<param name="name">The name of the alias.</param>
	<param name="equalsLocation">The location of the '='.</param>
	<param name="aliasedTypeName">The name being aliased.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.AliasImport">
	<summary>
 A parse tree for an Imports statement that aliases a type or namespace.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ForBlockStatement.ControlExpression">
	<summary>
 The control expression for the loop.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ForBlockStatement.ControlVariableDeclarator">
	<summary>
 The control variable declarator, if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ForBlockStatement.EqualsLocation">
	<summary>
 The location of the '='.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ForBlockStatement.LowerBoundExpression">
	<summary>
 The lower bound of the loop.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ForBlockStatement.ToLocation">
	<summary>
 The location of the 'To'.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ForBlockStatement.UpperBoundExpression">
	<summary>
 The upper bound of the loop.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ForBlockStatement.StepLocation">
	<summary>
 The location of the 'Step', if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ForBlockStatement.StepExpression">
	<summary>
 The step of the loop, if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ForBlockStatement.NextStatement">
	<summary>
 The Next statement, if any.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ForBlockStatement.#ctor(Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.VariableDeclarator,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.NextStatement,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a For statement.
 </summary>
	<param name="controlExpression">The control expression for the loop.</param>
	<param name="controlVariableDeclarator">The control variable declarator, if any.</param>
	<param name="equalsLocation">The location of the '='.</param>
	<param name="lowerBoundExpression">The lower bound of the loop.</param>
	<param name="toLocation">The location of the 'To'.</param>
	<param name="upperBoundExpression">The upper bound of the loop.</param>
	<param name="stepLocation">The location of the 'Step', if any.</param>
	<param name="stepExpression">The step of the loop, if any.</param>
	<param name="statements">The statements in the For loop.</param>
	<param name="nextStatement">The Next statement, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ForBlockStatement">
	<summary>
 A parse tree for a For statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.HandlerStatement.Name">
	<summary>
 The event name.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.HandlerStatement.CommaLocation">
	<summary>
 The location of the ','.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.HandlerStatement.DelegateExpression">
	<summary>
 The delegate expression.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.HandlerStatement">
	<summary>
 A parse tree for an AddHandler or RemoveHandler statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.MidAssignmentStatement.HasTypeCharacter">
	<summary>
 Whether the Mid identifier had a type character.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.MidAssignmentStatement.LeftParenthesisLocation">
	<summary>
 The location of the left parenthesis.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.MidAssignmentStatement.TargetExpression">
	<summary>
 The target of the assignment.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.MidAssignmentStatement.StartCommaLocation">
	<summary>
 The location of the comma before the start expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.MidAssignmentStatement.StartExpression">
	<summary>
 The expression representing the start of the string to replace.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.MidAssignmentStatement.LengthCommaLocation">
	<summary>
 The location of the comma before the length expression, if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.MidAssignmentStatement.LengthExpression">
	<summary>
 The expression representing the length of the string to replace, if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.MidAssignmentStatement.RightParenthesisLocation">
	<summary>
 The right parenthesis location.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.MidAssignmentStatement.OperatorLocation">
	<summary>
 The location of the operator.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.MidAssignmentStatement.SourceExpression">
	<summary>
 The source of the assignment.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.MidAssignmentStatement.#ctor(System.Boolean,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for an assignment statement.
 </summary>
	<param name="hasTypeCharacter">Whether the Mid identifier has a type character.</param>
	<param name="leftParenthesisLocation">The location of the left parenthesis.</param>
	<param name="targetExpression">The target of the assignment.</param>
	<param name="startCommaLocation">The location of the comma before the start expression.</param>
	<param name="startExpression">The expression representing the start of the string to replace.</param>
	<param name="lengthCommaLocation">The location of the comma before the length expression, if any.</param>
	<param name="lengthExpression">The expression representing the length of the string to replace, if any.</param>
	<param name="operatorLocation">The location of the operator.</param>
	<param name="sourceExpression">The source of the assignment.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.MidAssignmentStatement">
	<summary>
 A parse tree for a Mid assignment statement.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.StopStatement.#ctor(Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a Stop statement.
 </summary>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.StopStatement">
	<summary>
 A parse tree for a Stop statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.IntrinsicTypeName.IntrinsicType">
	<summary>
 The intrinsic type.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.IntrinsicTypeName.#ctor(Dlrsoft.VBScript.Parser.IntrinsicType,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new intrinsic type parse tree.
 </summary>
	<param name="intrinsicType">The intrinsic type.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.IntrinsicTypeName">
	<summary>
 A parse tree for an intrinsic type name.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.TryCastExpression.#ctor(Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.TypeName,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for a TryCast expression.
 </summary>
	<param name="leftParenthesisLocation">The location of the '('.</param>
	<param name="operand">The expression to be converted.</param>
	<param name="commaLocation">The location of the ','.</param>
	<param name="target">The target type of the conversion.</param>
	<param name="rightParenthesisLocation">The location of the ')'.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.TryCastExpression">
	<summary>
 A parse tree for a CType expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.OptionDeclaration.OptionType">
	<summary>
 The type of Option statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.OptionDeclaration.OptionTypeLocation">
	<summary>
 The location of the Option type (e.g. "Strict"), if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.OptionDeclaration.OptionArgumentLocation">
	<summary>
 The location of the Option argument (e.g. "On"), if any.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.OptionDeclaration.#ctor(Dlrsoft.VBScript.Parser.OptionType,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for an Option declaration.
 </summary>
	<param name="optionType">The type of the Option declaration.</param>
	<param name="optionTypeLocation">The location of the Option type, if any.</param>
	<param name="optionArgumentLocation">The location of the Option argument, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.OptionDeclaration">
	<summary>
 A parse tree for an Option declaration.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CharacterLiteralExpression.Literal">
	<summary>
 The literal value.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.CharacterLiteralExpression.#ctor(System.Char,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for a character literal expression.
 </summary>
	<param name="literal">The literal value.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.CharacterLiteralExpression">
	<summary>
 A parse tree for a character literal expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.File.Declarations">
	<summary>
 The declarations in the file.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.File.#ctor(Dlrsoft.VBScript.Parser.DeclarationCollection,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new file parse tree.
 </summary>
	<param name="declarations">The declarations in the file.</param>
	<param name="span">The location of the tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.File">
	<summary>
 A parse tree for an entire file.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ExpressionInitializer.Expression">
	<summary>
 The expression.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ExpressionInitializer.#ctor(Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new expression initializer parse tree.
 </summary>
	<param name="expression">The expression.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ExpressionInitializer">
	<summary>
 A parse tree for an expression initializer.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.EmptyStatement.#ctor(Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for an empty statement.
 </summary>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.EmptyStatement">
	<summary>
 A parse tree for an empty statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.EraseStatement.Variables">
	<summary>
 The variables to erase.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.EraseStatement.#ctor(Dlrsoft.VBScript.Parser.ExpressionCollection,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for an Erase statement.
 </summary>
	<param name="variables">The variables to erase.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.EraseStatement">
	<summary>
 A parse tree for an Erase statement.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.LabelStatement.#ctor(Dlrsoft.VBScript.Parser.SimpleName,System.Boolean,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a parse tree for a label declaration statement.
 </summary>
	<param name="name">The label to branch to, if any.</param>
	<param name="isLineNumber">Whether the label is a line number.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.LabelStatement">
	<summary>
 A parse tree for a label declaration statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.LoopStatement.IsWhile">
	<summary>
 Whether the Loop has a While or Until.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.LoopStatement.WhileOrUntilLocation">
	<summary>
 The location of the While or Until, if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.LoopStatement.Expression">
	<summary>
 The loop expression, if any.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.LoopStatement.#ctor(Dlrsoft.VBScript.Parser.Expression,System.Boolean,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a parse tree for a Loop statement.
 </summary>
	<param name="expression">The loop expression, if any.</param>
	<param name="isWhile">WHether the Loop has a While or Until.</param>
	<param name="whileOrUntilLocation">The location of the While or Until, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.LoopStatement">
	<summary>
 A parse tree for a Loop statement.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ThrowStatement.#ctor(Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a Throw statement.
 </summary>
	<param name="expression">The expression.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ThrowStatement">
	<summary>
 A parse tree for a Throw statement.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.TypeNameCollection.#ctor(System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.TypeName},System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Location},Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new type name collection.
 </summary>
	<param name="typeMembers">The type names in the collection.</param>
	<param name="commaLocations">The locations of the commas in the collection.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.TypeNameCollection">
	<summary>
 A read-only collection of type names.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Span.Start">
	<summary>
 The start location of the span.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Span.Finish">
	<summary>
 The end location of the span.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Span.IsValid">
	<summary>
 Whether the locations in the span are valid.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.Span.#ctor(Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Location)">
	<summary>
 Constructs a new span with a specific start and end location.
 </summary>
	<param name="start">The beginning of the span.</param>
	<param name="finish">The end of the span.</param>
</member><member name="M:Dlrsoft.VBScript.Parser.Span.op_Equality(Dlrsoft.VBScript.Parser.Span,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Compares two specified Span values to see if they are equal.
 </summary>
	<param name="left">One span to compare.</param>
	<param name="right">The other span to compare.</param>
	<returns>True if the spans are the same, False otherwise.</returns>
</member><member name="M:Dlrsoft.VBScript.Parser.Span.op_Inequality(Dlrsoft.VBScript.Parser.Span,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Compares two specified Span values to see if they are not equal.
 </summary>
	<param name="left">One span to compare.</param>
	<param name="right">The other span to compare.</param>
	<returns>True if the spans are not the same, False otherwise.</returns>
</member><member name="T:Dlrsoft.VBScript.Parser.Span">
	<summary>
 Stores the location of a span of text.
 </summary>
	<remarks>The end location is exclusive.</remarks>
</member><member name="T:Dlrsoft.VBScript.Parser.SyntaxErrorType">
	<summary>
 The type of a syntax error.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.BlockDeclaration.KeywordLocation">
	<summary>
 The location of the keyword.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.BlockDeclaration.Name">
	<summary>
 The name of the declaration.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.BlockDeclaration.Declarations">
	<summary>
 The declarations in the block.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.BlockDeclaration.EndDeclaration">
	<summary>
 The End statement for the block.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.BlockDeclaration">
	<summary>
 A parse tree for a block declaration.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.SpecialNameTypes">
	<summary>
 The types of special names that exist.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ClassDeclaration.#ctor(Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.ModifierCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.SimpleName,Dlrsoft.VBScript.Parser.TypeParameterCollection,Dlrsoft.VBScript.Parser.DeclarationCollection,Dlrsoft.VBScript.Parser.EndBlockDeclaration,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a Class declaration.
 </summary>
	<param name="attributes">The attributes for the parse tree.</param>
	<param name="modifiers">The modifiers for the parse tree.</param>
	<param name="keywordLocation">The location of the keyword.</param>
	<param name="name">The name of the declaration.</param>
	<param name="typeParameters">The type parameters of the type, if any.</param>
	<param name="declarations">The declarations in the block.</param>
	<param name="endStatement">The end block declaration, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ClassDeclaration">
	<summary>
 A parse tree for a Class declaration.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ConstructorDeclaration.#ctor(Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.ModifierCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.SimpleName,Dlrsoft.VBScript.Parser.ParameterCollection,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.EndBlockDeclaration,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Creates a new parse tree for a constructor declaration.
 </summary>
	<param name="attributes">The attributes for the parse tree.</param>
	<param name="modifiers">The modifiers for the parse tree.</param>
	<param name="keywordLocation">The location of the keyword.</param>
	<param name="name">The name of the declaration.</param>
	<param name="parameters">The parameters of the declaration.</param>
	<param name="statements">The statements in the declaration.</param>
	<param name="endDeclaration">The end block declaration, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ConstructorDeclaration">
	<summary>
 A parse tree for a constructor declaration.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.EnumDeclaration.AsLocation">
	<summary>
 The location of the 'As', if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.EnumDeclaration.ElementType">
	<summary>
 The element type of the enumerated type, if any.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.EnumDeclaration.#ctor(Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.ModifierCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.SimpleName,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.TypeName,Dlrsoft.VBScript.Parser.DeclarationCollection,Dlrsoft.VBScript.Parser.EndBlockDeclaration,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a parse tree for an Enum declaration.
 </summary>
	<param name="attributes">The attributes for the parse tree.</param>
	<param name="modifiers">The modifiers for the parse tree.</param>
	<param name="keywordLocation">The location of the keyword.</param>
	<param name="name">The name of the declaration.</param>
	<param name="asLocation">The location of the 'As', if any.</param>
	<param name="elementType">The element type of the enumerated type, if any.</param>
	<param name="declarations">The enumerated values.</param>
	<param name="endStatement">The end block declaration, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.EnumDeclaration">
	<summary>
 A parse tree for an Enum declaration.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.IntrinsicCastExpression.IntrinsicType">
	<summary>
 The intrinsic type conversion.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.IntrinsicCastExpression.LeftParenthesisLocation">
	<summary>
 The location of the '('.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.IntrinsicCastExpression.RightParenthesisLocation">
	<summary>
 The location of the ')'.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.IntrinsicCastExpression.#ctor(Dlrsoft.VBScript.Parser.IntrinsicType,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for an intrinsic conversion expression.
 </summary>
	<param name="intrinsicType">The intrinsic type conversion.</param>
	<param name="leftParenthesisLocation">The location of the '('.</param>
	<param name="operand">The expression to convert.</param>
	<param name="rightParenthesisLocation">The location of the ')'.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.IntrinsicCastExpression">
	<summary>
 A parse tree for an intrinsic conversion expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.StringLiteralExpression.Literal">
	<summary>
 The literal value.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.StringLiteralExpression.#ctor(System.String,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new string literal expression parse tree.
 </summary>
	<param name="literal">The literal value.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.StringLiteralExpression">
	<summary>
 A parse tree for a string literal expression.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.Name">
	<summary>
 A parse tree for a name.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.QualifiedName.Qualifier">
	<summary>
 The qualifier on the left-hand side of the dot.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.QualifiedName.DotLocation">
	<summary>
 The location of the dot.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.QualifiedName.Name">
	<summary>
 The name on the right-hand side of the dot.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.QualifiedName.#ctor(Dlrsoft.VBScript.Parser.Name,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.SimpleName,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for a qualified name.
 </summary>
	<param name="qualifier">The qualifier on the left-hand side of the dot.</param>
	<param name="dotLocation">The location of the dot.</param>
	<param name="name">The name on the right-hand side of the dot.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.QualifiedName">
	<summary>
 A parse tree for a qualified name (e.g. 'foo.bar').
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Parameter.Attributes">
	<summary>
 The attributes on the parameter.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Parameter.Modifiers">
	<summary>
 The modifiers on the parameter.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Parameter.VariableName">
	<summary>
 The name of the parameter.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Parameter.AsLocation">
	<summary>
 The location of the 'As', if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Parameter.ParameterType">
	<summary>
 The parameter type, if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Parameter.EqualsLocation">
	<summary>
 The location of the '=', if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Parameter.Initializer">
	<summary>
 The initializer for the parameter, if any.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.Parameter.#ctor(Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.ModifierCollection,Dlrsoft.VBScript.Parser.VariableName,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.TypeName,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Initializer,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parameter parse tree.
 </summary>
	<param name="attributes">The attributes on the parameter.</param>
	<param name="modifiers">The modifiers on the parameter.</param>
	<param name="variableName">The name of the parameter.</param>
	<param name="asLocation">The location of the 'As'.</param>
	<param name="parameterType">The type of the parameter. Can be Nothing.</param>
	<param name="equalsLocation">The location of the '='.</param>
	<param name="initializer">The initializer for the parameter. Can be Nothing.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.Parameter">
	<summary>
 A parse tree for a parameter.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.CaseClause">
	<summary>
 A parse tree for a case clause in a Select statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Comment.Comment">
	<summary>
 The text of the comment.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Comment.IsREM">
	<summary>
 Whether the comment is a REM comment.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.Comment.#ctor(System.String,System.Boolean,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new comment parse tree.
 </summary>
	<param name="comment">The text of the comment.</param>
	<param name="isREM">Whether the comment is a REM comment.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.Comment">
	<summary>
 A parse tree for a comment.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ExternalLineMapping.Start">
	<summary>
 The start location of the mapping in the source.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ExternalLineMapping.Finish">
	<summary>
 The end location of the mapping in the source.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ExternalLineMapping.File">
	<summary>
 The external file the source maps to.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ExternalLineMapping.Line">
	<summary>
 The external line number the source maps to.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ExternalLineMapping.#ctor(Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Location,System.String,System.Int64)">
	<summary>
 Constructs a new external line mapping.
 </summary>
	<param name="start">The start location in the source.</param>
	<param name="finish">The end location in the source.</param>
	<param name="file">The name of the external file.</param>
	<param name="line">The line number in the external file.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ExternalLineMapping">
	<summary>
 A line mapping from a source span to an external file and line.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.DeclarationCollection.#ctor(System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Declaration},System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Location},Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new collection of declarations.
 </summary>
	<param name="declarations">The declarations in the collection.</param>
	<param name="colonLocations">The locations of the colons in the collection.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.DeclarationCollection">
	<summary>
 A read-only collection of declarations.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.GetTypeExpression.LeftParenthesisLocation">
	<summary>
 The location of the '('.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.GetTypeExpression.Target">
	<summary>
 The target type of the GetType expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.GetTypeExpression.RightParenthesisLocation">
	<summary>
 The location of the ')'.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.GetTypeExpression.#ctor(Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.TypeName,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for a GetType expression.
 </summary>
	<param name="leftParenthesisLocation">The location of the '('.</param>
	<param name="target">The target type of the GetType expression.</param>
	<param name="rightParenthesisLocation">The location of the ')'.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.GetTypeExpression">
	<summary>
 A parse tree for a GetType expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.UnaryExpression.Operand">
	<summary>
 The operand of the expression.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.UnaryExpression">
	<summary>
 A parse tree for an expression that has an operand.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ParameterCollection.RightParenthesisLocation">
	<summary>
 The location of the ')'.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ParameterCollection.#ctor(System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Parameter},System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Location},Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new collection of parameters.
 </summary>
	<param name="parameters">The parameters in the collection</param>
	<param name="commaLocations">The locations of the commas.</param>
	<param name="rightParenthesisLocation">The location of the right parenthesis.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ParameterCollection">
	<summary>
 A collection of parameters.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CompoundAssignmentStatement.TargetExpression">
	<summary>
 The target of the assignment.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CompoundAssignmentStatement.CompoundOperator">
	<summary>
 The compound operator.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CompoundAssignmentStatement.OperatorLocation">
	<summary>
 The location of the operator.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.CompoundAssignmentStatement.SourceExpression">
	<summary>
 The source of the assignment.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.CompoundAssignmentStatement.#ctor(Dlrsoft.VBScript.Parser.OperatorType,Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a compound assignment statement.
 </summary>
	<param name="compoundOperator">The compound operator.</param>
	<param name="targetExpression">The target of the assignment.</param>
	<param name="operatorLocation">The location of the operator.</param>
	<param name="sourceExpression">The source of the assignment.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.CompoundAssignmentStatement">
	<summary>
 A parse tree for a compound assignment statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ElseBlockStatement.ElseStatement">
	<summary>
 The Else or Else If statement.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ElseBlockStatement.#ctor(Dlrsoft.VBScript.Parser.ElseStatement,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for an Else block statement.
 </summary>
	<param name="elseStatement">The Else statement.</param>
	<param name="statements">The statements in the block.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ElseBlockStatement">
	<summary>
 A parse tree for an Else block statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.EndBlockStatement.EndType">
	<summary>
 The type of block the statement ends.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.EndBlockStatement.EndArgumentLocation">
	<summary>
 The location of the end block argument.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.EndBlockStatement.#ctor(Dlrsoft.VBScript.Parser.BlockType,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Creates a new parse tree for an End block statement.
 </summary>
	<param name="endType">The type of the block the statement ends.</param>
	<param name="endArgumentLocation">The location of the end block argument.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.EndBlockStatement">
	<summary>
 A parse tree for an End statement of a block.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.TypeName">
	<summary>
 A parse tree for a type name.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.TypeConstraintCollection.RightBracketLocation">
	<summary>
 The location of the '}', if any.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.TypeConstraintCollection.#ctor(System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.TypeName},System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Location},Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new collection of type constraints.
 </summary>
	<param name="constraints">The type constraints in the collection</param>
	<param name="commaLocations">The locations of the commas.</param>
	<param name="rightBracketLocation">The location of the right bracket, if any.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.TypeConstraintCollection">
	<summary>
 A collection of type constraints.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.SourceRegion.Start">
	<summary>
 The start location of the region.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.SourceRegion.Finish">
	<summary>
 The end location of the region.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.SourceRegion.Description">
	<summary>
 The description of the region.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.SourceRegion.#ctor(Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Location,System.String)">
	<summary>
 Constructs a new source region.
 </summary>
	<param name="start">The start location of the region.</param>
	<param name="finish">The end location of the region.</param>
	<param name="description">The description of the region.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.SourceRegion">
	<summary>
 A region marked in the source code.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.LineTerminatorToken.#ctor(Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Create a new line terminator token.
 </summary>
	<param name="span">The location of the line terminator.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.LineTerminatorToken">
	<summary>
 A line terminator.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.AttributeCollection.RightBracketLocation">
	<summary>
 The location of the '}'.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.AttributeCollection.#ctor(System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Attribute},System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Location},Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new collection of attributes.
 </summary>
	<param name="attributes">The attributes in the collection.</param>
	<param name="commaLocations">The location of the commas in the list.</param>
	<param name="rightBracketLocation">The location of the right bracket.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.AttributeCollection">
	<summary>
 A read-only collection of attributes.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ColonDelimitedTreeCollection`1.ColonLocations">
	<summary>
 The locations of the colons in the collection.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.ColonDelimitedTreeCollection`1">
	<summary>
 A collection of trees that are colon delimited.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.OperatorDeclaration.OperatorToken">
	<summary>
 The operator being overloaded.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.OperatorDeclaration.#ctor(Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.ModifierCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Token,Dlrsoft.VBScript.Parser.ParameterCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.TypeName,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.EndBlockDeclaration,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Creates a new parse tree for an overloaded operator declaration.
 </summary>
	<param name="attributes">The attributes for the parse tree.</param>
	<param name="modifiers">The modifiers for the parse tree.</param>
	<param name="keywordLocation">The location of the keyword.</param>
	<param name="operatorToken">The operator being overloaded.</param>
	<param name="parameters">The parameters of the declaration.</param>
	<param name="asLocation">The location of the 'As', if any.</param>
	<param name="resultTypeAttributes">The attributes on the result type, if any.</param>
	<param name="resultType">The result type, if any.</param>
	<param name="statements">The statements in the declaration.</param>
	<param name="endDeclaration">The end block declaration, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.OperatorDeclaration">
	<summary>
 A parse tree for an overloaded operator declaration.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.DelegateSubDeclaration.#ctor(Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.ModifierCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.SimpleName,Dlrsoft.VBScript.Parser.TypeParameterCollection,Dlrsoft.VBScript.Parser.ParameterCollection,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a delegate Sub declaration.
 </summary>
	<param name="attributes">The attributes for the parse tree.</param>
	<param name="modifiers">The modifiers for the parse tree.</param>
	<param name="keywordLocation">The location of the keyword.</param>
	<param name="subLocation">The location of the 'Sub'.</param>
	<param name="name">The name of the declaration.</param>
	<param name="typeParameters">The type parameters of the declaration, if any.</param>
	<param name="parameters">The parameters of the declaration.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.DelegateSubDeclaration">
	<summary>
 A parse tree for a delegate Sub declaration.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ExternalDeclaration.CharsetLocation">
	<summary>
 The location of 'Auto', 'Ansi' or 'Unicode', if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ExternalDeclaration.Charset">
	<summary>
 The charset.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ExternalDeclaration.SubOrFunctionLocation">
	<summary>
 The location of 'Sub' or 'Function'.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ExternalDeclaration.LibLocation">
	<summary>
 The location of 'Lib', if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ExternalDeclaration.LibLiteral">
	<summary>
 The library, if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ExternalDeclaration.AliasLocation">
	<summary>
 The location of 'Alias', if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ExternalDeclaration.AliasLiteral">
	<summary>
 The alias, if any.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.ExternalDeclaration">
	<summary>
 A parse tree for a Declare statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.MethodDeclaration.ImplementsList">
	<summary>
 The list of implemented members.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.MethodDeclaration.HandlesList">
	<summary>
 The events that the declaration handles.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.MethodDeclaration.Statements">
	<summary>
 The statements in the declaration.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.MethodDeclaration.EndDeclaration">
	<summary>
 The end block declaration, if any.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.MethodDeclaration">
	<summary>
 A parse tree for a Sub, Function or constructor declaration.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.Initializer">
	<summary>
 A parse tree for an initializer.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.VariableNameCollection.#ctor(System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.VariableName},System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Location},Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new variable name collection.
 </summary>
	<param name="variableNames">The variable names in the collection.</param>
	<param name="commaLocations">The locations of the commas in the collection.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.VariableNameCollection">
	<summary>
 A read-only collection of variable names.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ExitStatement.ExitType">
	<summary>
 The type of tree this statement exits.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ExitStatement.ExitArgumentLocation">
	<summary>
 The location of the exit statement type.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ExitStatement.#ctor(Dlrsoft.VBScript.Parser.BlockType,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a parse tree for an Exit statement.
 </summary>
	<param name="exitType">The type of tree this statement exits.</param>
	<param name="exitArgumentLocation">The location of the exit statement type.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ExitStatement">
	<summary>
 A parse tree for an Exit statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ArrayTypeName.ElementTypeName">
	<summary>
 The type name for the element type of the array.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ArrayTypeName.Rank">
	<summary>
 The rank of the array type name.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ArrayTypeName.Arguments">
	<summary>
 The arguments of the array type name, if any.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ArrayTypeName.#ctor(Dlrsoft.VBScript.Parser.TypeName,System.Int32,Dlrsoft.VBScript.Parser.ArgumentCollection,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for an array type name.
 </summary>
	<param name="elementTypeName">The type name for the array element type.</param>
	<param name="rank">The rank of the array type name.</param>
	<param name="arguments">The arguments of the array type name, if any.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ArrayTypeName">
	<summary>
 A parse tree for an array type name.
 </summary>
	<remarks>
 This tree may contain size arguments as well.
 </remarks>
</member><member name="M:Dlrsoft.VBScript.Parser.VariableDeclaratorCollection.#ctor(System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.VariableDeclarator},System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Location},Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new collection of variable declarators.
 </summary>
	<param name="variableDeclarators">The variable declarators in the collection.</param>
	<param name="commaLocations">The locations of the commas in the list.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.VariableDeclaratorCollection">
	<summary>
 A read-only collection of variable declarators.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.IdentifierToken.IsKeyword(Dlrsoft.VBScript.Parser.TokenType)">
	<summary>
 Determines if a token type is a keyword.
 </summary>
	<param name="type">The token type to check.</param>
	<returns>True if the token type is a keyword, False otherwise.</returns>
</member><member name="P:Dlrsoft.VBScript.Parser.IdentifierToken.Identifier">
	<summary>
 The identifier name.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.IdentifierToken.Escaped">
	<summary>
 Whether the identifier is escaped.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.IdentifierToken.TypeCharacter">
	<summary>
 The type character of the identifier.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.IdentifierToken.#ctor(Dlrsoft.VBScript.Parser.TokenType,Dlrsoft.VBScript.Parser.TokenType,System.String,System.Boolean,Dlrsoft.VBScript.Parser.TypeCharacter,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new identifier token.
 </summary>
	<param name="type">The token type of the identifier.</param>
	<param name="unreservedType">The unreserved token type of the identifier.</param>
	<param name="identifier">The text of the identifier</param>
	<param name="escaped">Whether the identifier is escaped.</param>
	<param name="typeCharacter">The type character of the identifier.</param>
	<param name="span">The location of the identifier.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.IdentifierToken">
	<summary>
 An identifier.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Tree.Type">
	<summary>
 The type of the tree.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Tree.Span">
	<summary>
 The location of the tree.
 </summary>
	<remarks>
 The span ends at the first character beyond the tree
 </remarks>
</member><member name="P:Dlrsoft.VBScript.Parser.Tree.Parent">
	<summary>
 The parent of the tree. Nothing if the root tree.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Tree.Children">
	<summary>
 The children of the tree.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.Tree.IsBad">
	<summary>
 Whether the tree is 'bad'.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.Tree">
	<summary>
 The root class of all trees.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.Charset">
	<summary>
 The character set of a Declare statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.RaiseEventAccessorDeclaration.RaiseEventLocation">
	<summary>
 The location of the 'RaiseEvent'.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.RaiseEventAccessorDeclaration.Parameters">
	<summary>
 The accessor's parameters.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.RaiseEventAccessorDeclaration.Statements">
	<summary>
 The statements in the accessor.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.RaiseEventAccessorDeclaration.EndStatement">
	<summary>
 The End declaration for the accessor.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.RaiseEventAccessorDeclaration.#ctor(Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.ParameterCollection,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.EndBlockDeclaration,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a property accessor.
 </summary>
	<param name="attributes">The attributes for the parse tree.</param>
	<param name="raiseEventLocation">The location of the 'RaiseEvent'.</param>
	<param name="parameters">The parameters of the declaration.</param>
	<param name="statements">The statements in the declaration.</param>
	<param name="endStatement">The end block declaration, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.RaiseEventAccessorDeclaration">
	<summary>
 A parse tree for a RaiseEvent property accessor.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ExternalSubDeclaration.#ctor(Dlrsoft.VBScript.Parser.AttributeBlockCollection,Dlrsoft.VBScript.Parser.ModifierCollection,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Charset,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.SimpleName,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.StringLiteralExpression,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.StringLiteralExpression,Dlrsoft.VBScript.Parser.ParameterCollection,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a parse tree for a Declare Sub statement.
 </summary>
	<param name="attributes">The attributes for the parse tree.</param>
	<param name="modifiers">The modifiers for the parse tree.</param>
	<param name="keywordLocation">The location of the keyword.</param>
	<param name="charsetLocation">The location of the 'Ansi', 'Auto' or 'Unicode', if any.</param>
	<param name="charset">The charset.</param>
	<param name="subLocation">The location of 'Sub'.</param>
	<param name="name">The name of the declaration.</param>
	<param name="libLocation">The location of 'Lib', if any.</param>
	<param name="libLiteral">The library, if any.</param>
	<param name="aliasLocation">The location of 'Alias', if any.</param>
	<param name="aliasLiteral">The alias, if any.</param>
	<param name="parameters">The parameters of the declaration.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ExternalSubDeclaration">
	<summary>
 A parse tree for a Declare Sub statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.BinaryOperatorExpression.LeftOperand">
	<summary>
 The left operand expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.BinaryOperatorExpression.Operator">
	<summary>
 The operator.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.BinaryOperatorExpression.OperatorLocation">
	<summary>
 The location of the operator.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.BinaryOperatorExpression.RightOperand">
	<summary>
 The right operand expression.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.BinaryOperatorExpression.#ctor(Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.OperatorType,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for a binary operation.
 </summary>
	<param name="leftOperand">The left operand expression.</param>
	<param name="operator">The operator.</param>
	<param name="operatorLocation">The location of the operator.</param>
	<param name="rightOperand">The right operand expression.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.BinaryOperatorExpression">
	<summary>
 A parse tree for a binary operator expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.BooleanLiteralExpression.Literal">
	<summary>
 The literal value.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.BooleanLiteralExpression.#ctor(System.Boolean,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for a Boolean literal expression.
 </summary>
	<param name="literal">The literal value.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.BooleanLiteralExpression">
	<summary>
 A parse tree for a Boolean literal expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.InstanceExpression.InstanceType">
	<summary>
 The type of the instance expression.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.InstanceExpression.#ctor(Dlrsoft.VBScript.Parser.InstanceType,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for My, MyBase or MyClass.
 </summary>
	<param name="instanceType">The type of the instance expression.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.InstanceExpression">
	<summary>
 A parse tree for Me, MyBase or MyClass.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.VariableName.Name">
	<summary>
 The name.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.VariableName.ArrayType">
	<summary>
 The array modifier, if any.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.VariableName.#ctor(Dlrsoft.VBScript.Parser.SimpleName,Dlrsoft.VBScript.Parser.ArrayTypeName,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new variable name parse tree.
 </summary>
	<param name="name">The name.</param>
	<param name="arrayType">The array modifier, if any.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.VariableName">
	<summary>
 A parse tree to represent a variable name.
 </summary>
	<remarks>
 A variable name can have an array modifier after it (e.g. 'x(10) As Integer').
 </remarks>
</member><member name="P:Dlrsoft.VBScript.Parser.BlockStatement.Statements">
	<summary>
 The statements in the block.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.BlockStatement">
	<summary>
 A parse tree for a block statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.IfBlockStatement.Expression">
	<summary>
 The conditional expression.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.IfBlockStatement.ThenLocation">
	<summary>
 The location of the 'Then', if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.IfBlockStatement.ElseIfBlockStatements">
	<summary>
 The Else If statements.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.IfBlockStatement.ElseBlockStatement">
	<summary>
 The Else statement, if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.IfBlockStatement.EndStatement">
	<summary>
 The End If statement, if any.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.IfBlockStatement.#ctor(Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.StatementCollection,Dlrsoft.VBScript.Parser.ElseBlockStatement,Dlrsoft.VBScript.Parser.EndBlockStatement,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a new parse tree for a If statement.
 </summary>
	<param name="expression">The conditional expression.</param>
	<param name="thenLocation">The location of the 'Then', if any.</param>
	<param name="statements">The statements in the If block.</param>
	<param name="elseIfBlockStatements">The Else If statements.</param>
	<param name="elseBlockStatement">The Else statement, if any.</param>
	<param name="endStatement">The End If statement, if any.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.IfBlockStatement">
	<summary>
 A parse tree for an If block.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.OnErrorStatement.OnErrorType">
	<summary>
 The type of On Error statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.OnErrorStatement.ErrorLocation">
	<summary>
 The location of the 'Error'.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.OnErrorStatement.ResumeOrGoToLocation">
	<summary>
 The location of the 'Resume' or 'GoTo'.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.OnErrorStatement.NextOrZeroOrMinusLocation">
	<summary>
 The location of the 'Next', '0' or '-', if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.OnErrorStatement.OneLocation">
	<summary>
 The location of the '1', if any.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.OnErrorStatement.#ctor(Dlrsoft.VBScript.Parser.OnErrorType,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.SimpleName,System.Boolean,Dlrsoft.VBScript.Parser.Span,System.Collections.Generic.IList{Dlrsoft.VBScript.Parser.Comment})">
	<summary>
 Constructs a parse tree for an On Error statement.
 </summary>
	<param name="onErrorType">The type of the On Error statement.</param>
	<param name="errorLocation">The location of the 'Error'.</param>
	<param name="resumeOrGoToLocation">The location of the 'Resume' or 'GoTo'.</param>
	<param name="nextOrZeroOrMinusLocation">The location of the 'Next', '0' or '-', if any.</param>
	<param name="oneLocation">The location of the '1', if any.</param>
	<param name="name">The label to branch to, if any.</param>
	<param name="isLineNumber">Whether the label is a line number.</param>
	<param name="span">The location of the parse tree.</param>
	<param name="comments">The comments for the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.OnErrorStatement">
	<summary>
 A parse tree for an On Error statement.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.OnErrorType">
	<summary>
 The type of an On Error statement.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.IntegerLiteralToken.Literal">
	<summary>
 The value of the literal.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.IntegerLiteralToken.TypeCharacter">
	<summary>
 The type character of the literal.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.IntegerLiteralToken.IntegerBase">
	<summary>
 The integer base of the literal.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.IntegerLiteralToken.#ctor(System.Int32,Dlrsoft.VBScript.Parser.IntegerBase,Dlrsoft.VBScript.Parser.TypeCharacter,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new integer literal.
 </summary>
	<param name="literal">The literal value.</param>
	<param name="integerBase">The integer base of the literal.</param>
	<param name="typeCharacter">The type character of the literal.</param>
	<param name="span">The location of the literal.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.IntegerLiteralToken">
	<summary>
 An integer literal.
 </summary>
</member><member name="T:Dlrsoft.VBScript.Parser.TokenType">
	<summary>
 The type of a token.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ComparisonCaseClause.IsLocation">
	<summary>
 The location of the 'Is', if any.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ComparisonCaseClause.ComparisonOperator">
	<summary>
 The comparison operator used in the case clause.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ComparisonCaseClause.OperatorLocation">
	<summary>
 The location of the comparison operator.
 </summary>
</member><member name="P:Dlrsoft.VBScript.Parser.ComparisonCaseClause.Operand">
	<summary>
 The operand of the case clause.
 </summary>
</member><member name="M:Dlrsoft.VBScript.Parser.ComparisonCaseClause.#ctor(Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.OperatorType,Dlrsoft.VBScript.Parser.Location,Dlrsoft.VBScript.Parser.Expression,Dlrsoft.VBScript.Parser.Span)">
	<summary>
 Constructs a new parse tree for a comparison case clause.
 </summary>
	<param name="isLocation">The location of the 'Is', if any.</param>
	<param name="comparisonOperator">The comparison operator used.</param>
	<param name="operatorLocation">The location of the comparison operator.</param>
	<param name="operand">The operand of the comparison.</param>
	<param name="span">The location of the parse tree.</param>
</member><member name="T:Dlrsoft.VBScript.Parser.ComparisonCaseClause">
	<summary>
 A parse tree for a case clause that compares values.
 </summary>
</member><member name="F:Dlrsoft.VBScript.Parser.LanguageVersion.VisualBasic71">
	<summary>Visual Basic 7.1</summary>
	<remarks>Shipped in Visual Basic 2003</remarks>
</member><member name="F:Dlrsoft.VBScript.Parser.LanguageVersion.VisualBasic80">
	<summary>Visual Basic 8.0</summary>
	<remarks>Shipped in Visual Basic 2005</remarks>
</member><member name="T:Dlrsoft.VBScript.Parser.LanguageVersion">
	<summary>
 The version of the language you want.
 </summary>
</member>
</members>
</doc>